# =============================================================================
# ui/medical_summary.py - JAV√çTOTT VERZI√ì
# =============================================================================
"""
Orvosi √∂sszefoglal√≥ megjelen√≠t√©se.
M√ìDOS√çTVA: Appointment system integr√°ci√≥ hozz√°ad√°sa - JAV√çTOTT IMPORT
"""
import streamlit as st
from logic import is_evaluation_complete
from medline_integration.integration import integrate_medline_to_medical_summary_wrapper
from appointment_system.integration import integrate_appointment_booking
from pathlib import Path
from datetime import datetime

# JAV√çTOTT IMPORT - helyes f√ºggv√©nyn√©v
try:
    from appointment_system.integration import integrate_appointment_booking
except ImportError:
    # Fallback, ha az appointment system nincs telep√≠tve
    def integrate_appointment_booking(gpt_specialist_advice, patient_data, diagnosis):
        pass

def display_medical_summary():
    """Megjelen√≠ti az orvosi √∂sszefoglal√≥t."""
    if not is_evaluation_complete():
        return
    
    st.markdown("---")
    st.markdown("### üìã Orvosi √ñsszefoglal√≥")
    
    # Triage √©rt√©kel√©s
    if st.session_state.triage_level:
        st.info(f"**üè• Els≈ëdleges orvosi √©rt√©kel√©s:**\n{st.session_state.triage_level}")

    # Diagn√≥zis
    if st.session_state.diagnosis:
        st.info(f"**üî¨ Lehets√©ges diagn√≥zis:**\n{st.session_state.diagnosis}")

    # K√©zi alternat√≠v ter√°pia
    if st.session_state.alt_therapy:
        st.success(f"**üåø K√©zi alternat√≠v enyh√≠t≈ë javaslatok:**\n{st.session_state.alt_therapy}")

    # AI alternat√≠v ter√°pia
    if st.session_state.gpt_alt_therapy:
        st.success(f"**üß† AI √°ltal javasolt alternat√≠v enyh√≠t√©s:**\n{st.session_state.gpt_alt_therapy}")

    # Szakorvos javaslat
    if st.session_state.gpt_specialist_advice:
        st.warning(f"**üë®‚Äç‚öïÔ∏è Javasolt szakorvos:**\n{st.session_state.gpt_specialist_advice}")

    # Medline integr√°ci√≥
    integrate_medline_to_medical_summary_wrapper(
        st.session_state.diagnosis, 
        st.session_state.patient_data.get('symptoms', [])
    )

    # JAV√çTOTT: Appointment system integr√°ci√≥ - helyes f√ºggv√©nyn√©v
    integrate_appointment_booking(
        st.session_state.gpt_specialist_advice,
        st.session_state.patient_data,
        st.session_state.diagnosis
    )

    # Medline PDF let√∂lt√©s opci√≥
    if st.session_state.get('medline_topics') and len(st.session_state.medline_topics) > 0:
        st.markdown("---")
        st.markdown("### üì• Medline Inform√°ci√≥k Let√∂lt√©se")
        
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.info(f"""
            **{len(st.session_state.medline_topics)} Medline t√©mak√∂r √©rhet≈ë el let√∂lt√©sre**
            
            A let√∂lt√©s PDF form√°tumban t√∂rt√©nik, amely tartalmazza:
            - Teljes le√≠r√°sokat
            - Orvosi kifejez√©seket
            - Kapcsol√≥d√≥ inform√°ci√≥kat
            """)
        
        with col2:
            # Be√°ll√≠t√°sok
            combine_pdf = st.checkbox("Egyes√≠tett PDF", value=False, 
                                    key="medline_combined_pdf")
        
        # Ellen≈ërizz√ºk, hogy vannak-e m√°r let√∂lt√∂tt PDF-ek
        if 'medline_downloaded_pdfs' not in st.session_state:
            st.session_state.medline_downloaded_pdfs = []
        
        # Let√∂lt√©s gomb
        if st.button("üì• Let√∂lt√©s ind√≠t√°sa", type="primary", key="start_medline_download"):
            # Import √©s let√∂lt√©s
            import asyncio
            from medline_download import download_medline_pdfs
            
            # Progress bar
            progress_bar = st.progress(0.0)
            status_text = st.empty()
            
            # Async futtat√°s Streamlit-ben
            async def run_download():
                # Patient data el≈ëk√©sz√≠t√©se
                patient_data = {
                    'case_id': st.session_state.get('case_id', 'unknown'),
                    'diagnosis': st.session_state.get('diagnosis', ''),
                    'symptoms': st.session_state.patient_data.get('symptoms', [])
                }
                
                # Let√∂lt√©s
                result = await download_medline_pdfs(
                    st.session_state.medline_topics,
                    patient_data
                )
                
                return result
            
            # Progress update (polling)
            from medline_download import get_download_status
            
            # H√°tt√©r task ind√≠t√°sa
            with st.spinner("Medline inform√°ci√≥k let√∂lt√©se..."):
                # Async loop
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                try:
                    result = loop.run_until_complete(run_download())
                    
                    # Eredm√©ny megjelen√≠t√©se
                    if result['success']:
                        # Session state-ben t√°roljuk a PDF f√°jlokat
                        st.session_state.medline_downloaded_pdfs = result['pdf_files']
                        
                        st.success(f"""
                        ‚úÖ **Sikeres let√∂lt√©s!**
                        
                        L√©trehozott PDF f√°jlok: {len(result['pdf_files'])}
                        """)
                        
                        # Rerun hogy megjelenjenek a let√∂lt√©s gombok
                        st.rerun()
                        
                    else:
                        st.error("‚ùå Let√∂lt√©s sikertelen!")
                        for error in result['errors']:
                            st.error(error)
                            
                finally:
                    loop.close()
        
        # PDF let√∂lt≈ë gombok megjelen√≠t√©se (session state alapj√°n)
        if st.session_state.get('medline_downloaded_pdfs'):
            st.markdown("---")
            st.markdown("### üìÑ Let√∂lt√∂tt PDF F√°jlok")
            
            for i, pdf_file in enumerate(st.session_state.medline_downloaded_pdfs):
                pdf_path = Path("medline_data/pdfs") / pdf_file
                if pdf_path.exists():
                    try:
                        with open(pdf_path, 'rb') as f:
                            st.download_button(
                                label=f"üìÑ {pdf_file}",
                                data=f.read(),
                                file_name=pdf_file,
                                mime="application/pdf",
                                key=f"download_pdf_{i}_{len(pdf_file)}"  # Egyedi key
                            )
                    except Exception as e:
                        st.error(f"Hiba a f√°jl olvas√°sakor: {pdf_file} - {e}")
            
            # Reset gomb a PDF lista t√∂rl√©s√©hez
            if st.button("üóëÔ∏è PDF lista t√∂rl√©se", key="clear_pdf_list"):
                st.session_state.medline_downloaded_pdfs = []
                st.rerun()

    # RAG elemz√©s gomb
    if st.session_state.get('medline_downloaded_pdfs') and len(st.session_state.medline_downloaded_pdfs) > 0:
        st.markdown("---")
        st.markdown("### üß† RAG Alap√∫ Elemz√©s")
        
        st.info("""
        **M√©lyelemz√©s a let√∂lt√∂tt Medline dokumentumok alapj√°n**
        
        A RAG (Retrieval Augmented Generation) elemz√©s:
        - Feldolgozza a let√∂lt√∂tt PDF-eket
        - Relev√°ns inform√°ci√≥kat keres a beteg √°llapot√°hoz
        - Szem√©lyre szabott tan√°csokat gener√°l
        """)
        
        if st.button("üîç RAG Elemz√©s ind√≠t√°sa", type="primary", key="start_rag_analysis"):
            # RAG modul import√°l√°sa
            from rag_pdf import run_rag_analysis
            
            # Patient data √∂sszegy≈±jt√©se
            patient_data_for_rag = st.session_state.patient_data.copy()
            patient_data_for_rag['diagnosis'] = st.session_state.get('diagnosis', '')
            patient_data_for_rag['case_id'] = st.session_state.get('case_id', 
                                            f"case-{datetime.now().strftime('%Y%m%d%H%M%S')}")
            
            # RAG elemz√©s futtat√°sa
            rag_results = run_rag_analysis(patient_data_for_rag)
            
            # Eredm√©nyek session state-be ment√©se
            st.session_state['rag_analysis_results'] = rag_results   

    # PubMed elemz√©s (ha van RAG eredm√©ny)
    if st.session_state.get('rag_analysis_results'):
        st.markdown("---")
        st.markdown("### üî¨ PubMed M√©lykutat√°s")
        
        st.info("""
        **Tudom√°nyos publik√°ci√≥k elemz√©se a PubMed adatb√°zisb√≥l**
        
        A PubMed elemz√©s:
        - A vil√°g legnagyobb orvosi publik√°ci√≥s adatb√°zis√°t haszn√°lja
        - Evidencia-alap√∫ kezel√©si javaslatokat keres
        - A legfrissebb kutat√°si eredm√©nyeket dolgozza fel
        """)
        
        if st.button("üî¨ PubMed Elemz√©s ind√≠t√°sa", type="primary", key="start_pubmed_analysis"):
            # PubMed modul import√°l√°sa
            from pubmed_integration import run_pubmed_analysis
            
            # Elemz√©s futtat√°sa
            pubmed_results = run_pubmed_analysis(
                patient_data=patient_data_for_rag,
                rag_results=st.session_state.get('rag_analysis_results')
            )
            
            # Eredm√©nyek session state-be ment√©se
            st.session_state['pubmed_analysis_results'] = pubmed_results

def display_patient_data_summary():
    """P√°ciens adatok √∂sszefoglal√≥j√°nak megjelen√≠t√©se."""
    if not any(v for v in st.session_state.patient_data.values() if v):
        return
    
    data = st.session_state.patient_data
    
    with st.expander("üìä √ñsszegy≈±jt√∂tt adatok", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            if data.get('age'):
                st.write(f"**√âletkor:** {data['age']} √©v")
            if data.get('gender'):
                st.write(f"**Nem:** {data['gender']}")
            if data.get('duration'):
                st.write(f"**Id≈ëtartam:** {data['duration']}")
            if data.get('severity'):
                st.write(f"**S√∫lyoss√°g:** {data['severity']}")
        
        with col2:
            if data.get('symptoms'):
                st.write(f"**T√ºnetek:** {', '.join(data['symptoms'])}")
            if data.get('existing_conditions'):
                st.write(f"**Betegs√©gek:** {', '.join(data['existing_conditions'])}")
            if data.get('medications'):
                st.write(f"**Gy√≥gyszerek:** {', '.join(data['medications'])}")

def create_medical_display():
    """Teljes orvosi megjelen√≠t≈ë komponens."""
    # P√°ciens adatok √∂sszefoglal√≥ja
    display_patient_data_summary()
    
    # Orvosi √∂sszefoglal√≥ (csak ha k√©sz az √©rt√©kel√©s)
    display_medical_summary()