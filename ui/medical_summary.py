# =============================================================================
# ui/medical_summary.py - JAV√çTOTT VERZI√ì
# =============================================================================
"""
Orvosi √∂sszefoglal√≥ megjelen√≠t√©se.
M√ìDOS√çTVA: Appointment system integr√°ci√≥ hozz√°ad√°sa - JAV√çTOTT IMPORT
"""
import streamlit as st
from logic import is_evaluation_complete
from medline_integration.integration import integrate_medline_to_medical_summary_wrapper

# JAV√çTOTT IMPORT - helyes f√ºggv√©nyn√©v
try:
    from appointment_system.integration import integrate_appointment_booking
except ImportError:
    # Fallback, ha az appointment system nincs telep√≠tve
    def integrate_appointment_booking(gpt_specialist_advice, patient_data, diagnosis):
        pass

def display_medical_summary():
    """Megjelen√≠ti az orvosi √∂sszefoglal√≥t."""
    if not is_evaluation_complete():
        return
    
    st.markdown("---")
    st.markdown("### üìã Orvosi √ñsszefoglal√≥")
    
    # Triage √©rt√©kel√©s
    if st.session_state.triage_level:
        st.info(f"**üè• Els≈ëdleges orvosi √©rt√©kel√©s:**\n{st.session_state.triage_level}")

    # Diagn√≥zis
    if st.session_state.diagnosis:
        st.info(f"**üî¨ Lehets√©ges diagn√≥zis:**\n{st.session_state.diagnosis}")

    # K√©zi alternat√≠v ter√°pia
    if st.session_state.alt_therapy:
        st.success(f"**üåø K√©zi alternat√≠v enyh√≠t≈ë javaslatok:**\n{st.session_state.alt_therapy}")

    # AI alternat√≠v ter√°pia
    if st.session_state.gpt_alt_therapy:
        st.success(f"**üß† AI √°ltal javasolt alternat√≠v enyh√≠t√©s:**\n{st.session_state.gpt_alt_therapy}")

    # Szakorvos javaslat
    if st.session_state.gpt_specialist_advice:
        st.warning(f"**üë®‚Äç‚öïÔ∏è Javasolt szakorvos:**\n{st.session_state.gpt_specialist_advice}")

    # Medline integr√°ci√≥
    integrate_medline_to_medical_summary_wrapper(
        st.session_state.diagnosis, 
        st.session_state.patient_data.get('symptoms', [])
    )

    # JAV√çTOTT: Appointment system integr√°ci√≥ - helyes f√ºggv√©nyn√©v
    integrate_appointment_booking(
        st.session_state.gpt_specialist_advice,
        st.session_state.patient_data,
        st.session_state.diagnosis
    )

def display_patient_data_summary():
    """P√°ciens adatok √∂sszefoglal√≥j√°nak megjelen√≠t√©se."""
    if not any(v for v in st.session_state.patient_data.values() if v):
        return
    
    data = st.session_state.patient_data
    
    with st.expander("üìä √ñsszegy≈±jt√∂tt adatok", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            if data.get('age'):
                st.write(f"**√âletkor:** {data['age']} √©v")
            if data.get('gender'):
                st.write(f"**Nem:** {data['gender']}")
            if data.get('duration'):
                st.write(f"**Id≈ëtartam:** {data['duration']}")
            if data.get('severity'):
                st.write(f"**S√∫lyoss√°g:** {data['severity']}")
        
        with col2:
            if data.get('symptoms'):
                st.write(f"**T√ºnetek:** {', '.join(data['symptoms'])}")
            if data.get('existing_conditions'):
                st.write(f"**Betegs√©gek:** {', '.join(data['existing_conditions'])}")
            if data.get('medications'):
                st.write(f"**Gy√≥gyszerek:** {', '.join(data['medications'])}")

def create_medical_display():
    """Teljes orvosi megjelen√≠t≈ë komponens."""
    # P√°ciens adatok √∂sszefoglal√≥ja
    display_patient_data_summary()
    
    # Orvosi √∂sszefoglal√≥ (csak ha k√©sz az √©rt√©kel√©s)
    display_medical_summary()