import streamlit as st
from openai import OpenAI
import json
import re
import datetime
import hashlib
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import mm
import os

# OpenAI kliens inicializ√°l√°sa
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Streamlit konfigur√°ci√≥
st.set_page_config(
    page_title="Eg√©szs√©g√ºgyi Chatbot",
    page_icon="ü©∫",
    layout="wide",
    initial_sidebar_state="auto"
)

# Session state inicializ√°l√°s
def initialize_session_state():
    """Session state v√°ltoz√≥k inicializ√°l√°sa."""
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = [
            {"role": "assistant", "content": """√údv√∂zl√∂m! √ân egy eg√©szs√©g√ºgyi asszisztens vagyok. 

**Hogyan m≈±k√∂dik a konzult√°ci√≥:**
1. üìù El≈ësz√∂r √∂sszegy≈±jt√∂m az √∂sszes sz√ºks√©ges inform√°ci√≥t √ñnr≈ël
2. üîç Majd elk√©sz√≠tem a r√©szletes orvosi √©rt√©kel√©st  
3. üìÑ V√©g√ºl let√∂ltheti az √∂sszefoglal√≥t

**Kezdj√ºk!** K√©rem, √≠rja le, mi a panasza vagy milyen t√ºnetei vannak."""}
        ]
    
    if "patient_data" not in st.session_state:
        st.session_state.patient_data = {
            "age": None,
            "gender": None,
            "symptoms": [],
            "duration": None,
            "severity": None,
            "existing_conditions": [],
            "medications": []
        }

    if "triage_level" not in st.session_state:
        st.session_state.triage_level = ""

    if "alt_therapy" not in st.session_state:
        st.session_state.alt_therapy = ""

    if "diagnosis" not in st.session_state:
        st.session_state.diagnosis = ""

    if "gpt_alt_therapy" not in st.session_state:
        st.session_state.gpt_alt_therapy = ""

    if "gpt_specialist_advice" not in st.session_state:
        st.session_state.gpt_specialist_advice = ""

    if "asked_for_more_symptoms" not in st.session_state:
        st.session_state.asked_for_more_symptoms = False

    # Sidebar friss√≠t√©s tracking
    if "sidebar_last_update" not in st.session_state:
        st.session_state.sidebar_last_update = ""
    
    if "sidebar_container" not in st.session_state:
        st.session_state.sidebar_container = None

# Tool schema az √∫j OpenAI form√°tumban
tool_schema = {
    "type": "function",
    "function": {
        "name": "extract_medical_info",
        "description": "P√°ciens panasz√°nak sz√∂veges √©rtelmez√©se struktur√°lt eg√©szs√©g√ºgyi mez≈ëkk√©",
        "parameters": {
            "type": "object",
            "properties": {
                "age": {"type": "integer", "description": "A p√°ciens √©letkora"},
                "gender": {"type": "string", "enum": ["f√©rfi", "n≈ë"], "description": "A p√°ciens neme"},
                "symptoms": {"type": "array", "items": {"type": "string"}, "description": "A p√°ciens t√ºnetei"},
                "duration": {"type": "string", "description": "T√ºnetek id≈ëtartama (pl. 2 napja, 1 hete)"},
                "severity": {"type": "string", "enum": ["enyhe", "s√∫lyos"], "description": "T√ºnetek s√∫lyoss√°ga"},
                "existing_conditions": {"type": "array", "items": {"type": "string"}, "description": "Megl√©v≈ë betegs√©gek, allergi√°k"},
                "medications": {"type": "array", "items": {"type": "string"}, "description": "Szedett gy√≥gyszerek, vitaminok"}
            },
            "required": []
        }
    }
}

def update_state_from_function_output(output):
    try:
        parsed = json.loads(output)
        for key in parsed:
            if key in st.session_state.patient_data:
                current_value = st.session_state.patient_data[key]
                new_value = parsed[key]
                
                # Lista mez≈ëk eset√©n egyes√≠ts√ºk az √©rt√©keket (ne √≠rjuk fel√ºl)
                if key in ["symptoms", "existing_conditions", "medications"] and isinstance(new_value, list):
                    if isinstance(current_value, list):
                        # Csak √∫j elemeket adjunk hozz√°
                        for item in new_value:
                            if item and item not in current_value:
                                current_value.append(item)
                    else:
                        st.session_state.patient_data[key] = new_value
                else:
                    # Egyszer≈± mez≈ëk eset√©n csak akkor √≠rjuk fel√ºl, ha nincs m√©g √©rt√©k
                    if not current_value:
                        st.session_state.patient_data[key] = new_value
    except Exception as e:
        st.error(f"Hiba a function output feldolgoz√°s√°ban: {e}")

def manual_extract_info(user_input):
    """K√©zi inform√°ci√≥ kinyer√©s, ha a function call nem m≈±k√∂dik."""
    lower_input = user_input.lower()
    extracted_anything = False
    
    # T√ºnetek felismer√©se
    symptom_keywords = {
        'fejf√°j√°s': ['fej', 'fejem', 'fejf√°j√°s', 'fejf√°j√°st', 'f√°j a fejem'],
        'torokf√°j√°s': ['torok', 'torkom', 'torokf√°j√°s', 'torokf√°j√°st'],
        'hasmen√©s': ['hasmen√©s', 'hasmen√©st', 'foly√≥s', 'sz√©klet'],
        'l√°z': ['l√°z', 'l√°zas', 'meleg', 'forr√≥s√°g'],
        'k√∂h√∂g√©s': ['k√∂h√∂g', 'k√∂h√∂g√©s', 'k√∂h√∂g√∂k', 'k√∂hent'],
        'h√°ny√°s': ['h√°ny', 'h√°nyok', 'h√°nytam', 'h√°ny√°s'],
        'f√°radts√°g': ['f√°radt', 'f√°radts√°g', 'kimer√ºlt', 'gyenge']
    }
    
    for symptom, keywords in symptom_keywords.items():
        if any(keyword in lower_input for keyword in keywords):
            current_symptoms = st.session_state.patient_data.get('symptoms', [])
            if symptom not in current_symptoms:
                current_symptoms.append(symptom)
                st.session_state.patient_data['symptoms'] = current_symptoms
                extracted_anything = True
    
    # √âletkor felismer√©se
    age_match = re.search(r'(\d{1,2})\s*√©v', user_input)
    if age_match:
        age = int(age_match.group(1))
        if 0 < age < 120 and not st.session_state.patient_data.get('age'):
            st.session_state.patient_data['age'] = age
            extracted_anything = True
    
    # Nem felismer√©se
    if 'f√©rfi' in lower_input and not st.session_state.patient_data.get('gender'):
        st.session_state.patient_data['gender'] = 'f√©rfi'
        extracted_anything = True
    elif ('n≈ë' in lower_input or 'n≈ëi' in lower_input) and not st.session_state.patient_data.get('gender'):
        st.session_state.patient_data['gender'] = 'n≈ë'
        extracted_anything = True
    
    # Id≈ëtartam felismer√©se
    duration_patterns = [
        r'(\d+)\s*nap', r'(\d+)\s*h√©t', r'(\d+)\s*h√≥nap',
        r'tegnap', r'ma', r'm√∫lt h√©t'
    ]
    if not st.session_state.patient_data.get('duration'):
        for pattern in duration_patterns:
            if re.search(pattern, lower_input):
                st.session_state.patient_data['duration'] = user_input
                extracted_anything = True
                break
    
    # S√∫lyoss√°g felismer√©se
    if not st.session_state.patient_data.get('severity'):
        if any(word in lower_input for word in ['s√∫lyos', 'er≈ës', 'nagyon', 'borzaszt√≥']):
            st.session_state.patient_data['severity'] = 's√∫lyos'
            extracted_anything = True
        elif any(word in lower_input for word in ['enyhe', 'kis', 'kicsit', 'gyenge']):
            st.session_state.patient_data['severity'] = 'enyhe'
            extracted_anything = True
    
    return extracted_anything

def has_sufficient_data():
    """Ellen≈ërzi, hogy van-e elegend≈ë adat az orvosi √©rt√©kel√©shez."""
    data = st.session_state.patient_data
    
    # K√∂telez≈ë mez≈ëk
    has_age = data.get("age") is not None
    has_gender = data.get("gender") is not None and data.get("gender") != ""
    has_duration = data.get("duration") is not None and data.get("duration") != ""
    has_severity = data.get("severity") is not None and data.get("severity") != ""
    
    # T√ºnetek: legal√°bb 1 t√ºnet kell, vagy ha m√°r megk√©rdezt√ºk a t√∂bbit
    symptoms_count = len(data.get("symptoms", []))
    has_symptoms = symptoms_count >= 1 and (symptoms_count >= 2 or st.session_state.asked_for_more_symptoms)
    
    return has_age and has_gender and has_symptoms and has_duration and has_severity

def get_next_question_gpt():
    """GPT alap√∫ k√∂vetkez≈ë k√©rd√©s gener√°l√°s a hi√°nyz√≥ adatok alapj√°n."""
    try:
        data = st.session_state.patient_data
        chat_history = st.session_state.chat_history
        
        # Hi√°nyz√≥ adatok azonos√≠t√°sa
        missing_data = []
        symptoms_count = len(data.get("symptoms", []))
        
        if symptoms_count == 0:
            missing_data.append("symptoms")
        elif symptoms_count == 1 and not st.session_state.asked_for_more_symptoms:
            missing_data.append("additional_symptoms")
        
        if not data.get("duration"):
            missing_data.append("duration")
        if not data.get("severity"):
            missing_data.append("severity")
        if not data.get("age"):
            missing_data.append("age")
        if not data.get("gender"):
            missing_data.append("gender")
        if not data.get("existing_conditions"):
            missing_data.append("existing_conditions")
        if not data.get("medications"):
            missing_data.append("medications")
        
        # Ha nincs hi√°nyz√≥ adat, akkor k√©sz vagyunk
        if not missing_data:
            return "K√∂sz√∂n√∂m az √∂sszes inform√°ci√≥t! Most elk√©sz√≠tem az orvosi √©rt√©kel√©st."
        
        # Kontextus √©p√≠t√©se a GPT sz√°m√°ra
        current_data_summary = []
        if data.get("symptoms"):
            current_data_summary.append(f"T√ºnetek: {', '.join(data['symptoms'])}")
        if data.get("age"):
            current_data_summary.append(f"√âletkor: {data['age']} √©v")
        if data.get("gender"):
            current_data_summary.append(f"Nem: {data['gender']}")
        if data.get("duration"):
            current_data_summary.append(f"Id≈ëtartam: {data['duration']}")
        if data.get("severity"):
            current_data_summary.append(f"S√∫lyoss√°g: {data['severity']}")
        if data.get("existing_conditions"):
            current_data_summary.append(f"Betegs√©gek: {', '.join(data['existing_conditions'])}")
        if data.get("medications"):
            current_data_summary.append(f"Gy√≥gyszerek: {', '.join(data['medications'])}")
        
        # Utols√≥ 3 √ºzenet a kontextushoz
        recent_conversation = ""
        if len(chat_history) > 1:
            recent_messages = chat_history[-4:]  # Utols√≥ 4 √ºzenet (2 k√∂r)
            for msg in recent_messages:
                role = "Asszisztens" if msg["role"] == "assistant" else "P√°ciens"
                recent_conversation += f"{role}: {msg['content']}\n"
        
        # Priorit√°s meghat√°roz√°sa
        priority_field = missing_data[0]
        
        # GPT prompt √∂ssze√°ll√≠t√°sa
        system_prompt = """Te egy tapasztalt eg√©szs√©g√ºgyi asszisztens vagy, aki emp√°ti√°val √©s szak√©rtelemmel tesz fel k√©rd√©seket a p√°cienseknek.

FELADATOD: Term√©szetes, bar√°ts√°gos k√©rd√©st gener√°lni, ami pontosan EGY hi√°nyz√≥ adatot gy≈±jt be.

SZAB√ÅLYOK:
1. Csak EGY adatot k√©rdezz meg egyszerre
2. L√©gy empatikus √©s term√©szetes
3. Haszn√°ld a kontextust √©s a kor√°bbi besz√©lget√©st
4. R√∂vid, √©rthet≈ë k√©rd√©st t√©gy fel
5. Ha sz√ºks√©ges, adj p√©ld√°kat a v√°laszhoz
6. Magyar nyelven v√°laszolj

ADATMEZ≈êK MAGYAR√ÅZATA:
- symptoms: T√ºnetek (f√°jdalom, diszkomfort, stb.)
- additional_symptoms: Tov√°bbi t√ºnetek keres√©se az els≈ë ut√°n
- duration: T√ºnetek id≈ëtartama (mi√≥ta tart)
- severity: S√∫lyoss√°g (enyhe/s√∫lyos)
- age: √âletkor
- gender: Nem (f√©rfi/n≈ë)
- existing_conditions: Kr√≥nikus betegs√©gek, allergi√°k
- medications: Szedett gy√≥gyszerek, vitaminok"""

        user_prompt = f"""KONTEXTUS:
Jelenlegi adataim a p√°ciensr≈ël:
{chr(10).join(current_data_summary) if current_data_summary else "M√©g nincsenek adatok"}

Legut√≥bbi besz√©lget√©s:
{recent_conversation if recent_conversation else "Ez az els≈ë interakci√≥"}

K√ñVETKEZ≈ê HI√ÅNYZ√ì ADAT: {priority_field}

K√©rlek, tegy√©l fel EGY term√©szetes k√©rd√©st, ami ezt az adatot gy≈±jti be. A k√©rd√©s legyen empatikus √©s a kontextushoz ill≈ë."""

        # GPT h√≠v√°s
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_prompt}
            ],
            temperature=0.7,
            max_tokens=200
        )
        
        generated_question = response.choices[0].message.content.strip()
        
        # Speci√°lis tracking be√°ll√≠t√°sa
        if priority_field == "additional_symptoms":
            st.session_state.asked_for_more_symptoms = True
        
        return generated_question
        
    except Exception as e:
        st.error(f"Hiba a k√©rd√©s gener√°l√°s√°ban: {e}")
        # Fallback az eredeti statikus k√©rd√©sre
        return get_next_question_static()

def get_next_question_static():
    """Eredeti statikus k√©rd√©sgener√°l√°s fallback-k√©nt."""
    data = st.session_state.patient_data
    symptoms_count = len(data.get("symptoms", []))
    
    if symptoms_count == 0:
        return "K√©rem, √≠rja le r√©szletesen, milyen t√ºnetei vannak. Mi f√°j, vagy mit tapasztal?"
    elif symptoms_count == 1 and not st.session_state.asked_for_more_symptoms:
        st.session_state.asked_for_more_symptoms = True
        return f"K√∂sz√∂n√∂m! Ezt a t√ºnetet azonos√≠tottam: {', '.join(data['symptoms'])}. Vannak-e tov√°bbi t√ºnetei? Ha nincs t√∂bb, √≠rja be: 'nincs t√∂bb'."
    elif not data.get("duration"):
        symptoms_text = ', '.join(data['symptoms']) if data['symptoms'] else 'a t√ºneteket'
        return f"K√∂sz√∂n√∂m a t√ºnetek le√≠r√°s√°t! Mi√≥ta tapasztalja {symptoms_text}? (p√©ld√°ul: 2 napja, 1 hete, 3 h√≥napja)"
    elif not data.get("severity"):
        return "Hogyan √©rt√©keln√© t√ºnetei s√∫lyoss√°g√°t? Enyh√©nek vagy s√∫lyosnak min≈ës√≠ten√© ≈ëket?"
    elif not data.get("age"):
        return "H√°ny √©ves √ñn? Ez seg√≠t a pontosabb √©rt√©kel√©sben."
    elif not data.get("gender"):
        return "K√©rem, adja meg a nem√©t (f√©rfi/n≈ë). Ez is fontos az √©rt√©kel√©shez."
    elif not data.get("existing_conditions"):
        return "Vannak-e ismert kr√≥nikus betegs√©gei, allergi√°i vagy egy√©b eg√©szs√©g√ºgyi probl√©m√°i? Ha nincs, √≠rja be: 'nincs'."
    elif not data.get("medications"):
        return "Szed-e rendszeresen gy√≥gyszereket vagy vitaminokat? Ha nem, √≠rja be: 'nincs'."
    else:
        return "K√∂sz√∂n√∂m az √∂sszes inform√°ci√≥t! Most elk√©sz√≠tem az orvosi √©rt√©kel√©st."

def process_chat_input_enhanced(user_input):
    """Tov√°bbfejlesztett chat input feldolgoz√°s GPT k√©rd√©sekkel."""
    try:
        # OpenAI function call pr√≥b√°lkoz√°s (megtartjuk)
        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Te egy eg√©szs√©g√ºgyi asszisztens vagy. Kinyered az eg√©szs√©g√ºgyi adatokat a sz√∂vegb≈ël."},
                    {"role": "user", "content": user_input}
                ],
                tools=[tool_schema],
                tool_choice="auto"
            )
            
            reply = response.choices[0].message
            if hasattr(reply, 'tool_calls') and reply.tool_calls:
                for tool_call in reply.tool_calls:
                    if tool_call.function.name == "extract_medical_info":
                        update_state_from_function_output(tool_call.function.arguments)
        except:
            pass
        
        # Manual extraction (megtartjuk)
        manual_extract_info(user_input)
        
        # Speci√°lis esetek kezel√©se
        lower_input = user_input.lower()
        if any(phrase in lower_input for phrase in ['nincs t√∂bb', 'm√°s nincs', 'semmi m√°s', 'csak ennyi', 'nincs']):
            st.session_state.asked_for_more_symptoms = True
        
        # Ellen≈ërizz√ºk az √°llapotot
        if has_sufficient_data():
            if not st.session_state.triage_level:
                # √ârt√©kel√©s ind√≠t√°sa
                data = st.session_state.patient_data
                assistant_reply = "‚úÖ K√∂sz√∂n√∂m! √ñsszegy≈±jt√∂ttem az adatokat:\n\n"
                assistant_reply += f"‚Ä¢ **T√ºnetek:** {', '.join(data.get('symptoms', []))}\n"
                if data.get('duration'): assistant_reply += f"‚Ä¢ **Id≈ëtartam:** {data['duration']}\n"
                if data.get('severity'): assistant_reply += f"‚Ä¢ **S√∫lyoss√°g:** {data['severity']}\n"
                if data.get('age'): assistant_reply += f"‚Ä¢ **√âletkor:** {data['age']} √©v\n"
                if data.get('gender'): assistant_reply += f"‚Ä¢ **Nem:** {data['gender']}\n"
                
                assistant_reply += "\nüîÑ **Orvosi √©rt√©kel√©s k√©sz√≠t√©se...**"
                
                # √ârt√©kel√©sek futtat√°sa
                st.session_state.triage_level = triage_decision(st.session_state.patient_data)
                st.session_state.alt_therapy = alternative_recommendations(st.session_state.patient_data["symptoms"])
                st.session_state.diagnosis = generate_diagnosis(st.session_state.patient_data["symptoms"])
                st.session_state.gpt_alt_therapy = generate_alt_therapy(st.session_state.patient_data["symptoms"], st.session_state.diagnosis)
                st.session_state.gpt_specialist_advice = generate_specialist_advice(st.session_state.patient_data["symptoms"], st.session_state.diagnosis)
                
                return assistant_reply
            else:
                return "Az orvosi √©rt√©kel√©s m√°r elk√©sz√ºlt."
        else:
            # GPT alap√∫ k√∂vetkez≈ë k√©rd√©s - EZ AZ √öJ R√âSZ!
            next_question = get_next_question_gpt()
            
            # Ha siker√ºlt adatot kinyerni, meger≈ës√≠tj√ºk
            if st.session_state.patient_data.get('symptoms'):
                symptoms = ', '.join(st.session_state.patient_data['symptoms'])
                # Csak akkor tesz√ºnk hozz√° meger≈ës√≠t√©st, ha m√©g nincs benne
                if "r√∂gz√≠tettem" not in next_question.lower() and "k√∂sz√∂n√∂m" not in next_question.lower():
                    next_question = f"K√∂sz√∂n√∂m! R√∂gz√≠tettem: {symptoms}.\n\n{next_question}"
            
            return next_question

    except Exception as e:
        return f"Hiba t√∂rt√©nt: {str(e)}. Pr√≥b√°lja √∫jra!"

def get_next_question():
    """Meghat√°rozza a k√∂vetkez≈ë k√©rd√©st a hi√°nyz√≥ adatok alapj√°n."""
    data = st.session_state.patient_data
    symptoms_count = len(data.get("symptoms", []))
    
    # Priorit√°s szerint ellen≈ërz√©s
    if symptoms_count == 0:
        return "K√©rem, √≠rja le r√©szletesen, milyen t√ºnetei vannak. Mi f√°j, vagy mit tapasztal?"
    
    elif symptoms_count == 1 and not st.session_state.asked_for_more_symptoms:
        # Megjel√∂lj√ºk, hogy megk√©rdezt√ºk
        st.session_state.asked_for_more_symptoms = True
        return f"K√∂sz√∂n√∂m! Ezt a t√ºnetet azonos√≠tottam: {', '.join(data['symptoms'])}. Vannak-e tov√°bbi t√ºnetei? Ha nincs t√∂bb, √≠rja be: 'nincs t√∂bb'."
    
    elif not data.get("duration"):
        symptoms_text = ', '.join(data['symptoms']) if data['symptoms'] else 'a t√ºneteket'
        return f"K√∂sz√∂n√∂m a t√ºnetek le√≠r√°s√°t! Mi√≥ta tapasztalja {symptoms_text}? (p√©ld√°ul: 2 napja, 1 hete, 3 h√≥napja)"
    
    elif not data.get("severity"):
        return "Hogyan √©rt√©keln√© t√ºnetei s√∫lyoss√°g√°t? Enyh√©nek vagy s√∫lyosnak min≈ës√≠ten√© ≈ëket?"
    
    elif not data.get("age"):
        return "H√°ny √©ves √ñn? Ez seg√≠t a pontosabb √©rt√©kel√©sben."
    
    elif not data.get("gender"):
        return "K√©rem, adja meg a nem√©t (f√©rfi/n≈ë). Ez is fontos az √©rt√©kel√©shez."
    
    elif not data.get("existing_conditions"):
        return "Vannak-e ismert kr√≥nikus betegs√©gei, allergi√°i vagy egy√©b eg√©szs√©g√ºgyi probl√©m√°i? Ha nincs, √≠rja be: 'nincs'."
    
    elif not data.get("medications"):
        return "Szed-e rendszeresen gy√≥gyszereket vagy vitaminokat? Ha nem, √≠rja be: 'nincs'."
    
    else:
        return "K√∂sz√∂n√∂m az √∂sszes inform√°ci√≥t! Most elk√©sz√≠tem az orvosi √©rt√©kel√©st."

def get_data_hash():
    """Patient data hash a v√°ltoz√°sok k√∂vet√©s√©hez."""
    data_str = json.dumps(st.session_state.patient_data, sort_keys=True)
    return hashlib.md5(data_str.encode()).hexdigest()

def create_dynamic_sidebar():
    """Dinamikusan friss√ºl≈ë sidebar."""
    # Sidebar
    with st.sidebar:
        st.markdown("### ‚ÑπÔ∏è Inform√°ci√≥k")
        
        # Jogi nyilatkozat
        with st.expander("üìÑ Jogi nyilatkozat", expanded=False):
            st.markdown("""
            **Fontos:** Ez az alkalmaz√°s nem min≈ës√ºl orvosi tan√°csad√°snak. 
            Az itt megjelen√≠tett inform√°ci√≥k kiz√°r√≥lag t√°j√©koztat√≥ jelleg≈±ek. 
            T√ºnetei alapj√°n mindig konzult√°ljon eg√©szs√©g√ºgyi szakemberrel.
            """)
        
        # GDPR nyilatkozat
        with st.expander("üîí Adatv√©delem (GDPR)", expanded=False):
            st.markdown("""
            A megadott adatokat nem t√°roljuk √©s nem tov√°bb√≠tjuk harmadik f√©l sz√°m√°ra. 
            Az alkalmaz√°s c√©lja kiz√°r√≥lag a felhaszn√°l√≥ √∂n√°ll√≥ t√°j√©koz√≥d√°s√°nak t√°mogat√°sa. 
            Az adatokat kiz√°r√≥lag az aktu√°lis munkamenet sor√°n, ideiglenesen haszn√°ljuk fel.
            """)
        
        # Adatgy≈±jt√©s container - MINDIG friss√ºl
        status_container = st.empty()
        
        # Adatok hash ellen≈ërz√©se
        current_hash = get_data_hash()
        
        # Ha van adat, akkor megjelen√≠tj√ºk a st√°tuszt
        if any(v for v in st.session_state.patient_data.values() if v):
            with status_container.container():
                st.markdown("### üìä Adatgy≈±jt√©s √°llapota")
                data = st.session_state.patient_data
                
                # Progress tracking
                total_fields = 7
                completed_fields = 0
                
                status_map = {
                    "age": "üë§ √âletkor",
                    "gender": "üë§ Nem", 
                    "symptoms": "ü©∫ T√ºnetek",
                    "duration": "‚è∞ Id≈ëtartam",
                    "severity": "‚ö†Ô∏è S√∫lyoss√°g",
                    "existing_conditions": "üè• Betegs√©gek",
                    "medications": "üíä Gy√≥gyszerek"
                }
                
                for key, label in status_map.items():
                    value = data.get(key)
                    if key == "symptoms":
                        symptoms_count = len(value) if value else 0
                        if symptoms_count >= 2:
                            st.success(f"‚úÖ {label}: {symptoms_count} t√ºnet")
                            completed_fields += 1
                        elif symptoms_count == 1 and st.session_state.asked_for_more_symptoms:
                            st.success(f"‚úÖ {label}: {symptoms_count} t√ºnet (elegend≈ë)")
                            completed_fields += 1
                        elif symptoms_count == 1:
                            st.warning(f"‚è≥ {label}: {symptoms_count} t√ºnet (folyamatban)")
                        else:
                            st.error(f"‚ùå {label}: Hi√°nyzik")
                    else:
                        if value and value != "nincs":
                            st.success(f"‚úÖ {label}")
                            completed_fields += 1
                        else:
                            st.error(f"‚ùå {label}: Hi√°nyzik")
                
                # Progress bar
                progress = completed_fields / total_fields
                st.progress(progress, text=f"Adatgy≈±jt√©s: {completed_fields}/{total_fields}")
                
                if completed_fields == total_fields:
                    st.success("üéâ Minden adat √∂sszegy≈±lt! Az orvosi √©rt√©kel√©s elk√©sz√ºlhet.")
        
        # Hash ment√©se
        st.session_state.sidebar_last_update = current_hash
        
        # Export√°l√°s gomb - CSAK ha van √©rt√©kel√©s
        if st.session_state.triage_level:  # Ez jelzi, hogy megt√∂rt√©nt az √©rt√©kel√©s
            st.markdown("### üìÑ Export√°l√°s")
            
            export_data = create_export_data()
            
            # JSON export
            st.download_button(
                label="üìÑ JSON let√∂lt√©se",
                data=json.dumps(export_data, indent=2, ensure_ascii=False),
                file_name=f"{export_data['case_id']}.json",
                mime="application/json"
            )
            
            # PDF export
            pdf_data = generate_pdf(export_data)
            if pdf_data:
                st.download_button(
                    label="üìë PDF let√∂lt√©se",
                    data=pdf_data,
                    file_name=f"{export_data['case_id']}.pdf",
                    mime="application/pdf"
                )
        
        # Reset gomb
        if st.button("üîÑ √öj konzult√°ci√≥"):
            # Reset all session state including tracking variables
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()

def triage_decision(data):
    symptoms = data.get("symptoms", [])
    severity = data.get("severity", "")
    duration = data.get("duration", "")
    
    # Biztons√°gosabb regex kezel√©s
    duration_days = 0
    if duration:
        match = re.search(r"\d+", duration)
        if match:
            try:
                duration_days = int(match.group())
            except ValueError:
                duration_days = 0

    if "mellkasi f√°jdalom" in symptoms or "l√©gszomj" in symptoms:
        return "üî¥ A t√ºnetei alapj√°n azonnali orvosi ell√°t√°s javasolt."
    elif severity == "s√∫lyos" or ("l√°z" in symptoms and "torokf√°j√°s" in symptoms and duration_days > 3):
        return "üü° Javasolt orvossal konzult√°lni."
    else:
        return "üîµ A t√ºnetei alapj√°n val√≥sz√≠n≈±leg elegend≈ë lehet az otthoni megfigyel√©s."

ALTERNATIVE_TIPS = {
    "fejf√°j√°s": "Igy√°l t√∂bb vizet, ker√ºld az er≈ës f√©nyt, √©s pr√≥b√°lj meg relax√°lni.",
    "torokf√°j√°s": "Langyos s√≥s vizes gargaliz√°l√°s √©s kamillatea enyh√≠theti a panaszokat.",
    "k√∂h√∂g√©s": "M√©zes tea √©s p√°r√°s leveg≈ë seg√≠thet a k√∂h√∂g√©s csillap√≠t√°s√°ban.",
    "hasf√°j√°s": "Borsmentatea vagy meleg borogat√°s nyugtathatja a hasat.",
    "h√°nyinger": "Gy√∂mb√©res tea vagy lass√∫, m√©ly l√©gz√©s cs√∂kkentheti a h√°nyingert."
}

def alternative_recommendations(symptoms):
    tips = [ALTERNATIVE_TIPS[s] for s in symptoms if s in ALTERNATIVE_TIPS]
    return "\n".join(tips)

def generate_diagnosis(symptoms):
    prompt = f"A k√∂vetkez≈ë t√ºnetek alapj√°n javasolj egy lehets√©ges laikus diagn√≥zist r√∂viden, magyarul: {', '.join(symptoms)}"
    try:
        completion = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Te egy eg√©szs√©g√ºgyi asszisztens vagy, aki laikus t√ºnetle√≠r√°s alapj√°n seg√≠t diagn√≥zisban gondolkodni."},
                {"role": "user", "content": prompt}
            ]
        )
        return completion.choices[0].message.content.strip()
    except Exception as e:
        st.error(f"Hiba a diagn√≥zis gener√°l√°s√°ban: {e}")
        return "Nem siker√ºlt diagn√≥zist javasolni."

def generate_alt_therapy(symptoms, diagnosis):
    prompt = f"A k√∂vetkez≈ë t√ºnetek √©s laikus diagn√≥zis alapj√°n javasolj alternat√≠v (otthoni vagy term√©szetes) enyh√≠t≈ë megold√°sokat magyarul, r√∂viden:\nT√ºnetek: {', '.join(symptoms)}\nDiagn√≥zis: {diagnosis}"
    try:
        completion = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Te egy eg√©szs√©g√ºgyi asszisztens vagy, aki term√©szetes enyh√≠t≈ë javaslatokat fogalmaz meg t√ºnetek √©s diagn√≥zis alapj√°n."},
                {"role": "user", "content": prompt}
            ]
        )
        return completion.choices[0].message.content.strip()
    except Exception as e:
        st.error(f"Hiba az alternat√≠v ter√°pia gener√°l√°s√°ban: {e}")
        return "Nem siker√ºlt alternat√≠v javaslatot gener√°lni."

def generate_specialist_advice(symptoms, diagnosis):
    prompt = f"A k√∂vetkez≈ë t√ºnetek √©s laikus diagn√≥zis alapj√°n javasolj szakorvost, akihez √©rdemes fordulni: {', '.join(symptoms)} ‚Äî Diagn√≥zis: {diagnosis}"
    try:
        completion = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "Te egy eg√©szs√©g√ºgyi asszisztens vagy, aki megfelel≈ë szakorvost javasol a t√ºnetek √©s felt√©telezett diagn√≥zis alapj√°n."},
                {"role": "user", "content": prompt}
            ]
        )
        return completion.choices[0].message.content.strip()
    except Exception as e:
        st.error(f"Hiba a szakorvos javaslat gener√°l√°s√°ban: {e}")
        return "Nem siker√ºlt szakorvost javasolni."

def process_chat_input(user_input):
    """Feldolgozza a felhaszn√°l√≥i inputot √©s gener√°lja a v√°laszt."""
    try:
        # OpenAI function call pr√≥b√°lkoz√°s
        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Te egy eg√©szs√©g√ºgyi asszisztens vagy. Kinyered az eg√©szs√©g√ºgyi adatokat a sz√∂vegb≈ël."},
                    {"role": "user", "content": user_input}
                ],
                tools=[tool_schema],
                tool_choice="auto"
            )
            
            reply = response.choices[0].message
            if hasattr(reply, 'tool_calls') and reply.tool_calls:
                for tool_call in reply.tool_calls:
                    if tool_call.function.name == "extract_medical_info":
                        update_state_from_function_output(tool_call.function.arguments)
        except:
            pass  # Ha a function call nem m≈±k√∂dik, legal√°bb a manual extraction van
        
        # Speci√°lis esetek kezel√©se
        lower_input = user_input.lower()
        if any(phrase in lower_input for phrase in ['nincs t√∂bb', 'm√°s nincs', 'semmi m√°s', 'csak ennyi']):
            st.session_state.asked_for_more_symptoms = True
        
        # Ellen≈ërizz√ºk az √°llapotot
        if has_sufficient_data():
            if not st.session_state.triage_level:
                # √ârt√©kel√©s ind√≠t√°sa
                data = st.session_state.patient_data
                assistant_reply = "‚úÖ K√∂sz√∂n√∂m! √ñsszegy≈±jt√∂ttem az adatokat:\n\n"
                assistant_reply += f"‚Ä¢ **T√ºnetek:** {', '.join(data.get('symptoms', []))}\n"
                if data.get('duration'): assistant_reply += f"‚Ä¢ **Id≈ëtartam:** {data['duration']}\n"
                if data.get('severity'): assistant_reply += f"‚Ä¢ **S√∫lyoss√°g:** {data['severity']}\n"
                if data.get('age'): assistant_reply += f"‚Ä¢ **√âletkor:** {data['age']} √©v\n"
                if data.get('gender'): assistant_reply += f"‚Ä¢ **Nem:** {data['gender']}\n"
                
                assistant_reply += "\nüîÑ **Orvosi √©rt√©kel√©s k√©sz√≠t√©se...**"
                
                # √ârt√©kel√©sek futtat√°sa
                st.session_state.triage_level = triage_decision(st.session_state.patient_data)
                st.session_state.alt_therapy = alternative_recommendations(st.session_state.patient_data["symptoms"])
                st.session_state.diagnosis = generate_diagnosis(st.session_state.patient_data["symptoms"])
                st.session_state.gpt_alt_therapy = generate_alt_therapy(st.session_state.patient_data["symptoms"], st.session_state.diagnosis)
                st.session_state.gpt_specialist_advice = generate_specialist_advice(st.session_state.patient_data["symptoms"], st.session_state.diagnosis)
                
                return assistant_reply
            else:
                return "Az orvosi √©rt√©kel√©s m√°r elk√©sz√ºlt."
        else:
            # K√∂vetkez≈ë k√©rd√©s k√©r√©se
            next_question = get_next_question()
            
            # Ha siker√ºlt adatot kinyerni, meger≈ës√≠tj√ºk
            if st.session_state.patient_data.get('symptoms'):
                symptoms = ', '.join(st.session_state.patient_data['symptoms'])
                if "K√∂sz√∂n√∂m! R√∂gz√≠tettem" not in next_question:
                    next_question = f"K√∂sz√∂n√∂m! R√∂gz√≠tettem: {symptoms}.\n\n{next_question}"
            
            return next_question

    except Exception as e:
        return f"Hiba t√∂rt√©nt: {str(e)}. Pr√≥b√°lja √∫jra!"

def display_medical_summary():
    """Megjelen√≠ti az orvosi √∂sszefoglal√≥t."""
    if st.session_state.triage_level:
        st.info(f"**üè• Els≈ëdleges orvosi √©rt√©kel√©s:**\n{st.session_state.triage_level}")

    if st.session_state.diagnosis:
        st.info(f"**üî¨ Lehets√©ges diagn√≥zis:**\n{st.session_state.diagnosis}")

    if st.session_state.alt_therapy:
        st.success(f"**üåø K√©zi alternat√≠v enyh√≠t≈ë javaslatok:**\n{st.session_state.alt_therapy}")

    if st.session_state.gpt_alt_therapy:
        st.success(f"**üß† AI √°ltal javasolt alternat√≠v enyh√≠t√©s:**\n{st.session_state.gpt_alt_therapy}")

    if st.session_state.gpt_specialist_advice:
        st.warning(f"**üë®‚Äç‚öïÔ∏è Javasolt szakorvos:**\n{st.session_state.gpt_specialist_advice}")

def create_export_data():
    """L√©trehozza az export√°land√≥ adatokat."""
    export_data = st.session_state.patient_data.copy()
    export_data["diagnosis"] = st.session_state.diagnosis
    export_data["triage_level"] = st.session_state.triage_level
    export_data["specialist"] = st.session_state.gpt_specialist_advice
    export_data["alt_therapy"] = st.session_state.alt_therapy
    export_data["gpt_alt_therapy"] = st.session_state.gpt_alt_therapy
    export_data["timestamp"] = datetime.datetime.now().isoformat()
    export_data["case_id"] = f"case-{datetime.datetime.now().strftime('%Y%m%d%H%M%S')}"
    return export_data

def generate_pdf(export_data):
    """PDF gener√°l√°sa."""
    try:
        pdf_output = BytesIO()
        c = canvas.Canvas(pdf_output, pagesize=A4)
        width, height = A4
        y = height - 20 * mm

        c.setFont("Helvetica-Bold", 16)
        c.drawString(20 * mm, y, "Eg√©szs√©g√ºgyi √ñsszefoglal√≥")
        y -= 15 * mm

        c.setFont("Helvetica", 10)
        for key, value in export_data.items():
            if isinstance(value, list):
                value = ", ".join(value) if value else "Nincs adat"
            elif value is None:
                value = "Nincs adat"
            
            text = f"{key.replace('_', ' ').title()}: {value}"
            
            # Sz√∂veg t√∂rdel√©se
            max_width = width - 40 * mm
            words = text.split(' ')
            lines = []
            current_line = ""
            
            for word in words:
                test_line = current_line + " " + word if current_line else word
                if c.stringWidth(test_line, "Helvetica", 10) < max_width:
                    current_line = test_line
                else:
                    if current_line:
                        lines.append(current_line)
                    current_line = word
            
            if current_line:
                lines.append(current_line)
            
            for line in lines:
                c.drawString(20 * mm, y, line)
                y -= 5 * mm
                if y < 20 * mm:
                    c.showPage()
                    y = height - 20 * mm
                    c.setFont("Helvetica", 10)

        c.save()
        pdf_output.seek(0)
        return pdf_output
    except Exception as e:
        st.error(f"Hiba a PDF gener√°l√°s√°ban: {e}")
        return None

def main():
    """F≈ë alkalmaz√°s."""
    initialize_session_state()
    
    # C√≠msor
    st.title("ü©∫ Eg√©szs√©g√ºgyi Chatbot Asszisztens")
    
    # Dinamikus sidebar l√©trehoz√°sa
    create_dynamic_sidebar()

    # Chat t√∂rt√©net megjelen√≠t√©se
    for message in st.session_state.chat_history:
        with st.chat_message(message["role"]):
            st.markdown(message["content"])

    # Chat input
    if prompt := st.chat_input("√çrja le a t√ºneteit vagy tegyen fel k√©rd√©st..."):
        # Data hash ment√©se MIEL≈êTT feldolgozzuk
        old_hash = get_data_hash()
        
        # Ellen≈ërizz√ºk, hogy volt-e m√°r √©rt√©kel√©s
        had_evaluation = bool(st.session_state.triage_level)
        
        # Felhaszn√°l√≥i √ºzenet hozz√°ad√°sa
        st.session_state.chat_history.append({"role": "user", "content": prompt})
        
        # Felhaszn√°l√≥i √ºzenet megjelen√≠t√©se
        with st.chat_message("user"):
            st.markdown(prompt)
        
        # Adatok kinyer√©se K√ñZVETLEN√úL
        manual_extract_info(prompt)
        
        # Ellen≈ërizz√ºk, v√°ltozott-e az adat
        new_hash = get_data_hash()
        data_changed = old_hash != new_hash
        
        # AI v√°lasz gener√°l√°sa
        with st.chat_message("assistant"):
            with st.spinner("Elemz√©s folyamatban..."):
                response = process_chat_input_enhanced(prompt)
                st.markdown(response)
        
        # AI v√°lasz hozz√°ad√°sa a t√∂rt√©nethez
        st.session_state.chat_history.append({"role": "assistant", "content": response})
        
        # Ha most lett k√©sz az √©rt√©kel√©s, friss√≠tj√ºk az oldalt
        evaluation_just_completed = not had_evaluation and bool(st.session_state.triage_level)
        
        # Ha adat v√°ltozott VAGY az √©rt√©kel√©s most fejez≈ëd√∂tt be
        if data_changed or evaluation_just_completed:
            st.rerun()
        
        # Orvosi √∂sszefoglal√≥ megjelen√≠t√©se - CSAK ha van √©rt√©kel√©s
    if st.session_state.triage_level:  # Ez jelzi, hogy megt√∂rt√©nt az √©rt√©kel√©s
        st.markdown("---")
        st.markdown("### üìã Orvosi √ñsszefoglal√≥")
        display_medical_summary()

if __name__ == "__main__":
    main()