# =============================================================================
# appointment_system/ui/appointment_booking.py
# =============================================================================
"""
Id≈ëpont foglal√°s UI komponens
"""
import streamlit as st
from datetime import datetime, timedelta, date, time
from typing import List, Optional
from ..models.doctor import Doctor
from ..models.appointment import Appointment, AppointmentStatus, PatientInfo

class AppointmentBookingUI:
    """Id≈ëpont foglal√°s UI komponens"""
    
    def display_appointment_booking(self, doctor: Doctor, 
                                  patient_data: dict) -> Optional[Appointment]:
        """
        Id≈ëpont foglal√°s UI megjelen√≠t√©se
        
        Args:
            doctor: Kiv√°lasztott orvos
            patient_data: P√°ciens adatok
            
        Returns:
            Optional[Appointment]: L√©trehozott id≈ëpont
        """
        st.markdown("### üìÖ Id≈ëpont Foglal√°s")
        
        # Orvos eml√©keztet≈ë
        st.info(f"**Kiv√°lasztott orvos:** {doctor.get_display_name()} - {doctor.get_specialization_hu()}")
        
        # D√°tum kiv√°laszt√°s
        selected_date = self._display_date_selection(doctor)
        
        if not selected_date:
            return None
        
        # Id≈ëpont kiv√°laszt√°s
        selected_time = self._display_time_selection(doctor, selected_date)
        
        if not selected_time:
            return None
        
        # Kombin√°lt datetime
        selected_datetime = datetime.combine(selected_date, selected_time)
        
        # P√°ciens adatok kieg√©sz√≠t√©se
        patient_info = self._display_patient_info_form(patient_data)
        
        if not patient_info:
            return None
        
        # Foglal√°s meger≈ës√≠t√©se
        appointment = self._display_booking_confirmation(
            doctor, selected_datetime, patient_info
        )
        
        return appointment
    
    def _display_date_selection(self, doctor: Doctor) -> Optional[date]:
        """D√°tum kiv√°laszt√°s"""
        
        st.markdown("#### üìÜ D√°tum kiv√°laszt√°s")
        
        # K√∂vetkez≈ë 30 nap
        today = date.today()
        max_date = today + timedelta(days=30)
        
        # El√©rhet≈ë napok az orvos munkaideje alapj√°n
        available_days = [wh.day for wh in doctor.working_hours]
        
        # D√°tum input
        selected_date = st.date_input(
            "V√°lasszon d√°tumot:",
            min_value=today,
            max_value=max_date,
            value=today,
            key="appointment_date"
        )
        
        # Ellen≈ërz√©s, hogy dolgozik-e az orvos aznap
        weekday = selected_date.strftime("%A").lower()
        
        if weekday not in available_days:
            st.error(f"Dr. {doctor.name} nem rendel ezen a napon. V√°lasszon m√°sik d√°tumot.")
            return None
        
        return selected_date
    
    def _display_time_selection(self, doctor: Doctor, selected_date: date) -> Optional[time]:
        """Id≈ëpont kiv√°laszt√°s"""
        
        st.markdown("#### üïê Id≈ëpont kiv√°laszt√°s")
        
        # Munkaid≈ë lek√©r√©se
        weekday = selected_date.strftime("%A").lower()
        working_hours = doctor.get_working_hours_for_day(weekday)
        
        if not working_hours:
            st.error("Nincs munkaid≈ë inform√°ci√≥ erre a napra.")
            return None
        
        # El√©rhet≈ë id≈ëpontok gener√°l√°sa
        available_times = self._generate_available_times(doctor, working_hours)
        
        if not available_times:
            st.error("Nincs el√©rhet≈ë id≈ëpont erre a napra.")
            return None
        
        # Id≈ëpont kiv√°laszt√°s
        time_options = [t.strftime("%H:%M") for t in available_times]
        
        selected_time_str = st.selectbox(
            "V√°lasszon id≈ëpontot:",
            options=time_options,
            key="appointment_time"
        )
        
        # String to time konverzi√≥
        hour, minute = map(int, selected_time_str.split(':'))
        selected_time = time(hour, minute)
        
        return selected_time
    
    def _generate_available_times(self, doctor: Doctor, working_hours) -> List[time]:
        """El√©rhet≈ë id≈ëpontok gener√°l√°sa"""
        
        times = []
        duration = doctor.appointment_duration
        
        # Kezd≈ë √©s befejez≈ë id≈ë
        start_time = working_hours.start_time
        end_time = working_hours.end_time
        
        # Sz√ºnet ideje
        break_start = working_hours.break_start
        break_end = working_hours.break_end
        
        # Id≈ëpontok gener√°l√°sa
        current_time = start_time
        
        while current_time < end_time:
            # Ellen≈ërz√©s, hogy van-e el√©g id≈ë a rendel√©sre
            appointment_end = datetime.combine(date.today(), current_time) + timedelta(minutes=duration)
            appointment_end_time = appointment_end.time()
            
            if appointment_end_time > end_time:
                break
            
            # Sz√ºnet ellen≈ërz√©se
            if break_start and break_end:
                if not (current_time >= break_start and current_time < break_end):
                    times.append(current_time)
            else:
                times.append(current_time)
            
            # K√∂vetkez≈ë id≈ëpont
            next_time = datetime.combine(date.today(), current_time) + timedelta(minutes=duration)
            current_time = next_time.time()
        
        return times
    
    def _display_patient_info_form(self, patient_data: dict) -> Optional[PatientInfo]:
        """P√°ciens adatok kieg√©sz√≠t√©se"""
        
        st.markdown("#### üë§ P√°ciens Adatok")
        
        with st.form("patient_info_form"):
            col1, col2 = st.columns(2)
            
            with col1:
                name = st.text_input("Teljes n√©v *", key="patient_name")
                phone = st.text_input("Telefonsz√°m *", key="patient_phone")
                email = st.text_input("Email c√≠m *", key="patient_email")
            
            with col2:
                age = st.number_input("√âletkor *", min_value=1, max_value=120, 
                                    value=patient_data.get('age', 30),
                                    key="patient_age")
                gender = st.selectbox("Nem *", ["f√©rfi", "n≈ë"], 
                                    index=0 if patient_data.get('gender') == 'f√©rfi' else 1,
                                    key="patient_gender")
            
            # Automatikusan kit√∂lt√∂tt mez≈ëk
            symptoms = patient_data.get('symptoms', [])
            diagnosis = patient_data.get('diagnosis', '')
            existing_conditions = patient_data.get('existing_conditions', [])
            medications = patient_data.get('medications', [])
            
            st.write("**Automatikusan kit√∂lt√∂tt adatok:**")
            st.write(f"‚Ä¢ T√ºnetek: {', '.join(symptoms) if symptoms else 'Nincs'}")
            st.write(f"‚Ä¢ Diagn√≥zis: {diagnosis if diagnosis else 'Nincs'}")
            st.write(f"‚Ä¢ Betegs√©gek: {', '.join(existing_conditions) if existing_conditions else 'Nincs'}")
            st.write(f"‚Ä¢ Gy√≥gyszerek: {', '.join(medications) if medications else 'Nincs'}")
            
            submitted = st.form_submit_button("‚úÖ Adatok meger≈ës√≠t√©se")
        
        if submitted:
            # Valid√°ci√≥
            if not all([name, phone, email]):
                st.error("K√©rj√ºk t√∂ltse ki az √∂sszes k√∂telez≈ë mez≈ët!")
                return None
            
            # PatientInfo objektum l√©trehoz√°sa
            patient_info = PatientInfo(
                name=name,
                age=age,
                gender=gender,
                phone=phone,
                email=email,
                symptoms=symptoms,
                diagnosis=diagnosis,
                medical_history=existing_conditions,
                medications=medications
            )
            
            return patient_info
        
        return None
    
    def _display_booking_confirmation(self, doctor: Doctor, 
                                    selected_datetime: datetime,
                                    patient_info: PatientInfo) -> Optional[Appointment]:
        """Foglal√°s meger≈ës√≠t√©se"""
        
        st.markdown("#### ‚úÖ Foglal√°s Meger≈ës√≠t√©se")
        
        # √ñsszegz√©s
        st.info(f"""
        **Foglal√°s r√©szletei:**
        
        ‚Ä¢ **Orvos:** {doctor.get_display_name()} - {doctor.get_specialization_hu()}
        ‚Ä¢ **D√°tum:** {selected_datetime.strftime('%Y. %m. %d. %H:%M')}
        ‚Ä¢ **Id≈ëtartam:** {doctor.appointment_duration} perc
        ‚Ä¢ **P√°ciens:** {patient_info.name}
        ‚Ä¢ **Telefon:** {patient_info.phone}
        ‚Ä¢ **Email:** {patient_info.email}
        """)
        
        # Meger≈ës√≠t√©s gomb
        if st.button("üéØ Id≈ëpont foglal√°sa", type="primary"):
            # Appointment l√©trehoz√°sa
            appointment = Appointment(
                id=f"apt_{datetime.now().strftime('%Y%m%d%H%M%S')}",
                doctor_id=doctor.id,
                patient_info=patient_info,
                datetime=selected_datetime,
                duration_minutes=doctor.appointment_duration,
                status=AppointmentStatus.PENDING,
                notes=f"Automatikus foglal√°s a medical chatbot rendszerb≈ël."
            )
            
            # Session state-be ment√©s
            st.session_state.appointment_data = {
                "selected_doctor": doctor,
                "selected_datetime": selected_datetime,
                "appointment": appointment,
                "booking_status": "confirmed"
            }
            
            # Sikeres foglal√°s √ºzenet
            st.success(f"""
            üéâ **Sikeres foglal√°s!**
            
            Referencia sz√°m: **{appointment.reference_number}**
            
            Egy meger≈ës√≠t≈ë emailt k√ºldt√ºnk a {patient_info.email} c√≠mre.
            """)
            
            return appointment
        
        return None