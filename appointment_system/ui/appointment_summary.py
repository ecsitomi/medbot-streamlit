# =============================================================================
# appointment_system/ui/appointment_summary.py - JAV√çTOTT VERZI√ì
# =============================================================================
"""
Foglal√°s √∂sszegz≈ë komponens - JAV√çTOTT ICS gener√°l√°ssal
"""
import streamlit as st
from datetime import datetime
from typing import Optional
from ..models.doctor import Doctor
from ..models.appointment import Appointment

class AppointmentSummaryUI:
    """Foglal√°s √∂sszegz≈ë UI komponens - JAV√çTOTT VERZI√ì"""
    
    def display_appointment_summary(self, appointment: Appointment, doctor: Doctor):
        """Foglal√°s √∂sszegz≈ëj√©nek megjelen√≠t√©se - JAV√çTOTT VERZI√ì"""
        st.markdown("### üìã Foglal√°s √ñsszegz≈ëje")
        
        # Sikeres foglal√°s banner
        st.success("üéâ Sikeres id≈ëpont foglal√°s!")
        
        # Foglal√°s r√©szletei
        with st.container():
            st.markdown("#### üìù Foglal√°s R√©szletei")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("**Alapadatok:**")
                st.write(f"üÜî **Referencia sz√°m:** {appointment.reference_number}")
                st.write(f"üìÖ **D√°tum:** {appointment.datetime.strftime('%Y. %m. %d.')}")
                st.write(f"üïê **Id≈ëpont:** {appointment.datetime.strftime('%H:%M')}")
                st.write(f"‚è±Ô∏è **Id≈ëtartam:** {appointment.duration_minutes} perc")
                st.write(f"üìä **St√°tusz:** {appointment.get_status_hu()}")
            
            with col2:
                st.markdown("**Orvos adatai:**")
                st.write(f"üë®‚Äç‚öïÔ∏è **Orvos:** {doctor.get_display_name()}")
                st.write(f"üè• **Szakorvos:** {doctor.get_specialization_hu()}")
                st.write(f"üìû **Telefon:** {doctor.phone}")
                st.write(f"üìß **Email:** {doctor.email}")
                st.write(f"üìç **C√≠m:** {doctor.address}")
        
        # P√°ciens adatok
        with st.expander("üë§ P√°ciens Adatok", expanded=False):
            col1, col2 = st.columns(2)
            
            with col1:
                st.write(f"**N√©v:** {appointment.patient_info.name}")
                st.write(f"**√âletkor:** {appointment.patient_info.age} √©v")
                st.write(f"**Nem:** {appointment.patient_info.gender}")
            
            with col2:
                st.write(f"**Telefon:** {appointment.patient_info.phone}")
                st.write(f"**Email:** {appointment.patient_info.email}")
            
            # Orvosi adatok
            if appointment.patient_info.symptoms:
                st.write(f"**T√ºnetek:** {', '.join(appointment.patient_info.symptoms)}")
            
            if appointment.patient_info.diagnosis:
                st.write(f"**Diagn√≥zis:** {appointment.patient_info.diagnosis}")
            
            if appointment.patient_info.medical_history:
                st.write(f"**K√≥rt√∂rt√©net:** {', '.join(appointment.patient_info.medical_history)}")
            
            if appointment.patient_info.medications:
                st.write(f"**Gy√≥gyszerek:** {', '.join(appointment.patient_info.medications)}")
        
        # Fontos inform√°ci√≥k
        self._display_important_info(appointment, doctor)
        
        # Akci√≥gombok - JAV√çTOTT VERZI√ì
        self._display_action_buttons_fixed(appointment, doctor)
    
    def _display_important_info(self, appointment: Appointment, doctor: Doctor):
        """Fontos inform√°ci√≥k megjelen√≠t√©se - V√ÅLTOZATLAN"""
        st.markdown("#### ‚ö†Ô∏è Fontos Inform√°ci√≥k")
        
        st.info(f"""
        **Rendel√©s el≈ëtt:**
        ‚Ä¢ √ârkezzen 10 perccel kor√°bban
        ‚Ä¢ Hozza mag√°val a szem√©lyi igazolv√°ny√°t
        ‚Ä¢ Hozza mag√°val a TAJ k√°rty√°j√°t
        ‚Ä¢ Hozza mag√°val a kor√°bbi leleteit (ha vannak)
        
        **Kapcsolat:**
        ‚Ä¢ Rendel≈ë telefon: {doctor.phone}
        ‚Ä¢ Email: {doctor.email}
        ‚Ä¢ C√≠m: {doctor.address}
        
        **Lemond√°s/M√≥dos√≠t√°s:**
        ‚Ä¢ Legal√°bb 24 √≥r√°val a rendel√©s el≈ëtt
        ‚Ä¢ Referencia sz√°m: {appointment.reference_number}
        """)
    
    def _display_action_buttons_fixed(self, appointment: Appointment, doctor: Doctor):
        """JAV√çTOTT akci√≥gombok ICS let√∂lt√©ssel"""
        st.markdown("#### üéØ M≈±veletek")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üìß Email meger≈ës√≠t√©s", type="secondary"):
                self._send_email_confirmation(appointment, doctor)
        
        with col2:
            if st.button("üì± SMS eml√©keztet≈ë", type="secondary"):
                self._send_sms_reminder(appointment, doctor)
        
        with col3:
            # ‚úÖ JAV√çTOTT ICS let√∂lt√©s
            ics_content = self._generate_ics_content_fixed(appointment, doctor)
            
            st.download_button(
                label="üóìÔ∏è Napt√°rba (.ics)",
                data=ics_content.encode('utf-8'),
                file_name=f"appointment_{appointment.reference_number}.ics",
                mime="text/calendar",
                type="secondary"
            )
    
    def _generate_ics_content_fixed(self, appointment: Appointment, doctor: Doctor) -> str:
        """JAV√çTOTT ICS napt√°r f√°jl gener√°l√°sa"""
        
        # ‚úÖ Id≈ëz√≥na kezel√©s √©s proper form√°tum
        import uuid
        from datetime import timezone
        
        # UTC id≈ëpontra konvert√°l√°s (Budapest = UTC+1/+2)
        start_dt = appointment.datetime
        end_dt = appointment.get_end_datetime()
        
        # YYYYMMDDTHHMMSS form√°tum
        start_time = start_dt.strftime("%Y%m%dT%H%M%S")
        end_time = end_dt.strftime("%Y%m%dT%H%M%S")
        
        # Egyedi UID gener√°l√°sa
        uid = str(uuid.uuid4())
        
        # ‚úÖ Proper ICS form√°tum
        ics_content = f"""BEGIN:VCALENDAR
VERSION:2.0
PRODID:-//Medical Chatbot//Appointment System//HU
CALSCALE:GREGORIAN
METHOD:PUBLISH
BEGIN:VEVENT
UID:{uid}@medicalchatbot.hu
DTSTART:{start_time}
DTEND:{end_time}
DTSTAMP:{datetime.now().strftime("%Y%m%dT%H%M%S")}
SUMMARY:Orvosi rendel√©s - {doctor.get_display_name()}
DESCRIPTION:Orvosi rendel√©s\\n\\nOrvos: {doctor.get_display_name()}\\nSzakorvos: {doctor.get_specialization_hu()}\\nP√°ciens: {appointment.patient_info.name}\\nReferencia: {appointment.reference_number}\\n\\nT√ºnetek: {', '.join(appointment.patient_info.symptoms) if appointment.patient_info.symptoms else 'Nincs'}\\n\\nMegjegyz√©s: {appointment.notes}
LOCATION:{doctor.address}
ORGANIZER;CN={doctor.get_display_name()}:MAILTO:{doctor.email}
ATTENDEE;CN={appointment.patient_info.name}:MAILTO:{appointment.patient_info.email}
STATUS:CONFIRMED
SEQUENCE:0
PRIORITY:5
CLASS:PRIVATE
TRANSP:OPAQUE
BEGIN:VALARM
TRIGGER:-PT15M
ACTION:DISPLAY
DESCRIPTION:Eml√©keztet≈ë: Orvosi rendel√©s 15 perc m√∫lva
END:VALARM
END:VEVENT
END:VCALENDAR"""
        
        return ics_content
    
    # T√∂bbi met√≥dus v√°ltozatlan...
    def _send_email_confirmation(self, appointment: Appointment, doctor: Doctor):
        """Email meger≈ës√≠t√©s k√ºld√©se (szimul√°ci√≥) - V√ÅLTOZATLAN"""
        st.success(f"‚úÖ Email meger≈ës√≠t√©s elk√ºldve a {appointment.patient_info.email} c√≠mre!")
        
        with st.expander("üìß Email el≈ën√©zet"):
            st.markdown(f"""
            **T√°rgy:** Id≈ëpont foglal√°s meger≈ës√≠t√©se - {appointment.reference_number}
            
            Kedves {appointment.patient_info.name}!
            
            Meger≈ës√≠tj√ºk az id≈ëpont foglal√°s√°t:
            
            **Orvos:** {doctor.get_display_name()} - {doctor.get_specialization_hu()}
            **Id≈ëpont:** {appointment.get_formatted_datetime()}
            **Helysz√≠n:** {doctor.address}
            **Referencia:** {appointment.reference_number}
            
            K√©rj√ºk, √©rkezzen 10 perccel kor√°bban!
            
            √údv√∂zlettel,
            Medical Chatbot Team
            """)
    
    def _send_sms_reminder(self, appointment: Appointment, doctor: Doctor):
        """SMS eml√©keztet≈ë k√ºld√©se (szimul√°ci√≥) - V√ÅLTOZATLAN"""
        st.success(f"‚úÖ SMS eml√©keztet≈ë elk√ºldve a {appointment.patient_info.phone} sz√°mra!")
        
        with st.expander("üì± SMS el≈ën√©zet"):
            st.markdown(f"""
            **SMS tartalom:**
            
            Id≈ëpont eml√©keztet≈ë: {appointment.get_formatted_datetime()}
            Dr. {doctor.name} - {doctor.get_specialization_hu()}
            {doctor.address}
            Ref: {appointment.reference_number}
            """)
    
    def _add_to_calendar(self, appointment: Appointment, doctor: Doctor):
        """DEPRECATED - haszn√°ld a _display_action_buttons_fixed-et"""
        pass