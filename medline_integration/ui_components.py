# =============================================================================
# medline_integration/ui_components.py - MODERNIZ√ÅLT VERZI√ì
# =============================================================================
"""
Medline inform√°ci√≥k megjelen√≠t√©se modern, k√°rtya alap√∫ designnal
"""
import streamlit as st
from typing import List, Dict, Any
from .data_processor import MedlineTopicSummary, MedlineDataProcessor
from .api_client import MedlineAPIClient
import re

class MedlineUI:
    """
    Modern Medline UI komponensek k√°rtya alap√∫ megjelen√≠t√©ssel
    """
    
    def __init__(self):
        self.processor = MedlineDataProcessor()
        # Sz√≠npaletta a relevancia szintekhez
        self.relevance_colors = {
            'high': 'üü¢',
            'medium': 'üü°', 
            'low': 'üî¥'
        }
        # Kateg√≥ria ikonok
        self.category_icons = {
            'symptoms': 'ü©∫',
            'causes': 'üîç',
            'treatments': 'üíä',
            'prevention': 'üõ°Ô∏è',
            'when_to_see_doctor': '‚ö†Ô∏è'
        }
    
    def display_medline_section(self, diagnosis: str, symptoms: List[str], 
                               max_topics: int = 3, language: str = "en"):
        """
        Modern Medline szekci√≥ megjelen√≠t√©se k√°rtya alap√∫ layouttal
        """
        if not diagnosis and not symptoms:
            return
        
        # Modern fejl√©c gradiens h√°tt√©r szimul√°ci√≥val
        st.markdown("""
            <style>
            .medline-header {
                padding: 1rem;
                border-radius: 10px;
                margin-bottom: 1rem;
            }
            </style>
        """, unsafe_allow_html=True)
        
        # F≈ëc√≠m modern st√≠lussal
        st.markdown("## üè• **Medline Plus** Eg√©szs√©g√ºgyi K√∂nyvt√°r")
        st.caption(f"üèõÔ∏è Forr√°s: National Library of Medicine")
              
        search_terms = self._prepare_search_terms(diagnosis, symptoms)
        topics = self._load_medline_data(search_terms, max_topics, language)
    
        if not topics:
            st.error("‚ùå Nem tal√°lhat√≥k relev√°ns Medline Plus inform√°ci√≥k.")
            return
        
        # Modern t√©mak√°rty√°k megjelen√≠t√©se
        self._display_modern_topic_cards(topics, max_topics)
        
        # Tal√°latok √∂sszefoglal√≥ k√°rtya
        self._display_results_summary(topics, max_topics)

        # Keres√©si inform√°ci√≥ modern k√°rty√°n  
        if search_terms:
            st.info(f"üîç **Keres√©si kulcsszavak:** {' ‚Ä¢ '.join(search_terms)}")

        # Modern disclaimer
        self._display_modern_disclaimer()
    
    def _display_results_summary(self, topics: List[MedlineTopicSummary], max_topics: int):
        """Tal√°latok √∂sszefoglal√≥ k√°rtya"""
        st.markdown("---")
        avg_relevance = sum(t.relevance_score for t in topics[:max_topics]) / min(len(topics), max_topics)
        
        # √ñsszefoglal√≥ metrik√°k
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric(
                "üìö Tal√°latok", 
                f"{min(len(topics), max_topics)} t√©mak√∂r",
                delta=f"√∂sszesen {len(topics)}"
            )
        
        with col2:
            relevance_icon = self._get_relevance_icon(avg_relevance)
            st.metric(
                "üìä √Åtlag relevancia",
                f"{avg_relevance:.1f}",
                delta=f"{relevance_icon} szint"
            )
        
        with col3:
            top_score = max(t.relevance_score for t in topics[:max_topics])
            st.metric(
                "üéØ Legjobb egyez√©s",
                f"{top_score:.1f}",
                delta="pont"
            )   
    
    def _display_modern_topic_cards(self, topics: List[MedlineTopicSummary], max_topics: int):
        """Modern k√°rtya alap√∫ t√©mamegjelen√≠t√©s - 3 oszlopos grid elrendez√©sben"""
        
        # Grid elrendez√©s - 3 oszlop
        num_cols = 3
        topics_to_display = topics[:max_topics]
        num_topics = len(topics_to_display)
        
        # Sorok sz√°m√°nak kisz√°m√≠t√°sa
        num_rows = (num_topics + num_cols - 1) // num_cols
        
        # Grid l√©trehoz√°sa √©s felt√∂lt√©se
        for row in range(num_rows):
            cols = st.columns(num_cols)
            
            for col_idx in range(num_cols):
                topic_idx = row * num_cols + col_idx
                
                # Ha van m√©g megjelen√≠tend≈ë topic
                if topic_idx < num_topics:
                    topic = topics_to_display[topic_idx]
                    i = topic_idx + 1
                    
                    with cols[col_idx]:
                        # Az eredeti k√≥d k√°rtya tartalma
                        relevance_level = self._get_relevance_level(topic.relevance_score)
                        relevance_color = self._get_relevance_color_hex(relevance_level)
                        
                        st.markdown("---")
                        
                        # C√≠msor
                        st.markdown(f"### üìñ {i}. {topic.title}")
                        
                        # Link gomb
                        if topic.url:
                            st.link_button("üîó", topic.url, help="Medline Plus oldal megnyit√°sa")
                        
                        # R√∂vid √∂sszefoglal√≥ eleg√°ns dobozban
                        if topic.snippet:
                            st.markdown(f"""
                                <div style="
                                    background-color: rgba(240, 240, 240, 0.3);
                                    padding: 12px;
                                    border-radius: 8px;
                                    margin: 10px 0;
                                    font-style: italic;
                                ">
                                üìù {topic.snippet}
                                </div>
                            """, unsafe_allow_html=True)
                        
                        # Modern r√©szletek megjelen√≠t√©s tabs haszn√°lat√°val
                        if topic.summary or topic.groups or topic.mesh_terms:
                            with st.expander(f"üîç Tov√°bbi inform√°ci√≥k", expanded=False):
                                self._display_modern_topic_details(topic)
                        
                        st.markdown("</div>", unsafe_allow_html=True)
                        
                        # Marg√≥ a k√°rty√°k k√∂z√∂tt
                        st.markdown("<br>", unsafe_allow_html=True)
                        '''
    def _display_modern_topic_cards(self, topics: List[MedlineTopicSummary], max_topics: int):
        """Modern k√°rtya alap√∫ t√©mamegjelen√≠t√©s"""
        
        for i, topic in enumerate(topics[:max_topics], 1):
            # K√°rtya container sz√≠nes kerettel
            relevance_level = self._get_relevance_level(topic.relevance_score)
            relevance_color = self._get_relevance_color_hex(relevance_level)
        
            st.markdown("---")
            # K√°rtya fejl√©c
            header_col1, header_col2, header_col3 = st.columns([6, 2, 1])
            
            with header_col1:
                st.markdown(f"### üìñ {i}. {topic.title}")
                
            with header_col2:
                pass
            
            with header_col3:
                if topic.url:
                    st.link_button("üîó", topic.url, help="Medline Plus oldal megnyit√°sa")
            
            # R√∂vid √∂sszefoglal√≥ eleg√°ns dobozban
            if topic.snippet:
                st.markdown(f"""
                    <div style="
                        background-color: rgba(240, 240, 240, 0.3);
                        padding: 12px;
                        border-radius: 8px;
                        margin: 10px 0;
                        font-style: italic;
                    ">
                    üìù {topic.snippet}
                    </div>
                """, unsafe_allow_html=True)
            
            # Modern r√©szletek megjelen√≠t√©s tabs haszn√°lat√°val
            if topic.summary or topic.groups or topic.mesh_terms:
                with st.expander(f"üîç Tov√°bbi inform√°ci√≥k", expanded=False):
                    self._display_modern_topic_details(topic)
            
            st.markdown("</div>", unsafe_allow_html=True)
            
            # Szepar√°tor k√∂vetkez≈ë k√°rty√°ig
            if i < min(len(topics), max_topics):
                st.markdown("<br>", unsafe_allow_html=True)
    '''
    def _display_modern_topic_details(self, topic: MedlineTopicSummary):
        """Modern r√©szletek megjelen√≠t√©s tabokkal"""
        
        # Tab-ok a k√ºl√∂nb√∂z≈ë inform√°ci√≥khoz
        detail_tabs = []
        tab_contents = []
        
        # Dinamikusan √©p√≠tj√ºk a tab list√°t
        if topic.summary and topic.summary != topic.snippet:
            detail_tabs.append("üìÑ Le√≠r√°s")
            tab_contents.append('summary')
        
        key_info = self.processor.extract_key_information(topic)
        if any(key_info.values()):
            detail_tabs.append("üí° Kulcsinf√≥k")
            tab_contents.append('key_info')
        
        if topic.groups or topic.mesh_terms or topic.alt_titles:
            detail_tabs.append("üè∑Ô∏è C√≠mk√©k")
            tab_contents.append('tags')
        
        if detail_tabs:
            tabs = st.tabs(detail_tabs)
            
            for tab, content_type in zip(tabs, tab_contents):
                with tab:
                    if content_type == 'summary':
                        # √ñsszefoglal√≥ sz√©p form√°z√°ssal
                        summary_text = topic.summary[:1500] + "..." if len(topic.summary) > 1500 else topic.summary
                        st.markdown(f"""
                            <div style="
                                padding: 15px;
                                background: rgba(250, 250, 250, 0.5);
                                border-radius: 8px;
                                line-height: 1.6;
                            ">
                            {summary_text}
                            </div>
                        """, unsafe_allow_html=True)
                    
                    elif content_type == 'key_info':
                        self._display_key_info_cards(key_info)
                    
                    elif content_type == 'tags':
                        self._display_tags_modern(topic)
    
    def _display_key_info_cards(self, key_info: Dict[str, Any]):
        """Kulcsinform√°ci√≥k modern k√°rtya elrendez√©sben"""
        
        # 2 oszlopos elrendez√©s a kulcsinf√≥knak
        col1, col2 = st.columns(2)
        
        info_sections = [
            ('symptoms', 'T√ºnetek', col1),
            ('causes', 'Lehets√©ges okok', col2),
            ('treatments', 'Kezel√©sek', col1),
            ('prevention', 'Megel≈ëz√©s', col2),
            ('when_to_see_doctor', 'Orvoshoz fordul√°s', col1)
        ]
        
        for key, title, column in info_sections:
            if key_info.get(key):
                with column:
                    icon = self.category_icons.get(key, 'üìå')
                    st.markdown(f"**{icon} {title}**")
                    
                    # Modern lista megjelen√≠t√©s
                    for item in key_info[key]:
                        st.markdown(f"""
                            <div style="
                                margin-left: 20px;
                                padding: 5px;
                                border-left: 2px solid #e0e0e0;
                                padding-left: 10px;
                                margin-bottom: 5px;
                            ">
                            ‚Ä¢ {item}
                            </div>
                        """, unsafe_allow_html=True)
                    st.markdown("")
    
    def _display_tags_modern(self, topic: MedlineTopicSummary):
        """Modern c√≠mke megjelen√≠t√©s"""
        
        # Csoportok badge-ekkel
        if topic.groups:
            st.markdown("**üìÇ Kateg√≥ri√°k**")
            cols = st.columns(min(len(topic.groups), 3))
            for i, group in enumerate(topic.groups):
                with cols[i % 3]:
                    st.markdown(f"""
                        <span style="
                            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                            color: white;
                            padding: 5px 10px;
                            border-radius: 15px;
                            font-size: 0.9em;
                            display: inline-block;
                            margin: 2px;
                        ">
                        {group}
                        </span>
                    """, unsafe_allow_html=True)
        
        # MeSH kifejez√©sek modern chip-ekkel
        if topic.mesh_terms:
            st.markdown("**üè∑Ô∏è MeSH c√≠mk√©k**")
            # Chip-szer≈± megjelen√≠t√©s
            mesh_html = " ".join([
                f"""<span style="
                    background-color: #e3f2fd;
                    color: #1976d2;
                    padding: 4px 8px;
                    border-radius: 12px;
                    font-size: 0.85em;
                    display: inline-block;
                    margin: 2px;
                    border: 1px solid #90caf9;
                ">{term}</span>"""
                for term in topic.mesh_terms
            ])
            st.markdown(mesh_html, unsafe_allow_html=True)
        
        # Alternat√≠v c√≠mek
        if topic.alt_titles:
            st.markdown("**üîÑ Alternat√≠v elnevez√©sek**")
            for alt_title in topic.alt_titles:
                st.caption(f"‚Ä¢ {alt_title}")
    
    def _display_relevance_indicator(self, score: float):
        """Vizu√°lis relevancia indik√°tor progress bar-ral"""
        level = self._get_relevance_level(score)
        icon = self.relevance_colors[level]
        
        # Progress bar a relevanci√°hoz - pontsz√°m 0-100 k√∂z√∂tt van, normaliz√°ljuk 0-1 k√∂z√©
        progress_value = min(score / 100.0, 1.0)  # Biztos√≠tjuk hogy max 1.0 legyen
        
        # Sz√≠nk√≥dolt progress - pontsz√°mot 100-as sk√°l√°n jelen√≠tj√ºk meg
        if level == 'high':
            st.success(f"{icon} Magas relevancia")
            st.progress(progress_value, text=f"{score:.1f}/100")
        elif level == 'medium':
            st.warning(f"{icon} K√∂zepes relevancia")
            st.progress(progress_value, text=f"{score:.1f}/100")
        else:
            st.error(f"{icon} Alacsony relevancia")
            st.progress(progress_value, text=f"{score:.1f}/100")
    
    def _get_relevance_level(self, score: float) -> str:
        """Relevancia szint meghat√°roz√°sa - a pontsz√°mok tipikusan 0-30 k√∂z√∂tt vannak"""
        if score >= 15:  # Top relev√°ns tal√°latok
            return 'high'
        elif score >= 7:  # K√∂zepesen relev√°ns
            return 'medium'
        else:  # Kev√©sb√© relev√°ns
            return 'low'
    
    def _get_relevance_icon(self, score: float) -> str:
        """Relevancia ikon lek√©r√©se"""
        level = self._get_relevance_level(score)
        return self.relevance_colors[level]
    
    def _get_relevance_color_hex(self, level: str) -> str:
        """Relevancia sz√≠n hex k√≥dja"""
        colors = {
            'high': '#4caf50',
            'medium': '#ff9800',
            'low': '#f44336'
        }
        return colors.get(level, '#9e9e9e')
    
    def _display_modern_disclaimer(self):
        """Modern disclaimer diz√°jnnal"""
        st.markdown("<br>", unsafe_allow_html=True)
        
        with st.container():
            st.markdown("""
                <div style="
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 20px;
                    border-radius: 10px;
                    text-align: center;
                ">
                    <h4>üìö Medline Plus Inform√°ci√≥k</h4>
                    <p style="margin: 10px 0;">
                        A fenti inform√°ci√≥k az Amerikai Nemzeti Eg√©szs√©g√ºgyi K√∂nyvt√°r (NLM) 
                        Medline Plus adatb√°zis√°b√≥l sz√°rmaznak.
                    </p>
                    <p style="margin: 10px 0; font-weight: bold;">
                        ‚ö†Ô∏è Fontos: Ezek az inform√°ci√≥k kiz√°r√≥lag t√°j√©koztat√≥ jelleg≈±ek 
                        √©s nem helyettes√≠tik a szakorvosi konzult√°ci√≥t.
                    </p>
                </div>
            """, unsafe_allow_html=True)
    
    # ‚úÖ Megl√©v≈ë helper met√≥dusok v√°ltozatlanul
    def _prepare_search_terms(self, diagnosis: str, symptoms: List[str]) -> List[str]:
        """Keres√©si kifejez√©sek el≈ëk√©sz√≠t√©se - V√ÅLTOZATLAN"""
        search_terms = []
        
        if diagnosis:
            cleaned_diagnosis = self._clean_diagnosis(diagnosis)
            if cleaned_diagnosis:
                search_terms.append(cleaned_diagnosis)
        
        for symptom in symptoms[:3]:
            if symptom and symptom.strip():
                search_terms.append(symptom.strip())
        
        return list(set(search_terms))
    
    def _clean_diagnosis(self, diagnosis: str) -> str:
        """Diagn√≥zis tiszt√≠t√°sa keres√©shez - V√ÅLTOZATLAN"""
        stop_words = ['lehets√©ges', 'val√≥sz√≠n≈±', 'esetleg', 'tal√°n', 'lehet', 'a', 'az', 'egy']
        
        cleaned = diagnosis.lower()
        for stop_word in stop_words:
            cleaned = re.sub(rf'\b{stop_word}\b', '', cleaned)
        
        cleaned = re.sub(r'\s+', ' ', cleaned).strip()
        
        return cleaned if len(cleaned) > 2 else ''
    
    def _load_medline_data(self, search_terms: List[str], max_topics: int, language: str) -> List[MedlineTopicSummary]:
        """Medline adatok bet√∂lt√©se √©s feldolgoz√°sa - V√ÅLTOZATLAN"""
        try:
            client = MedlineAPIClient(language=language)
            
            all_results = []
            for term in search_terms:
                results = client.search_health_topics(term, max_results=5)
                all_results.extend(results)
            
            if not all_results:
                return []
            
            topics = self.processor.process_search_results(
                all_results, 
                search_terms,
                search_terms[0] if search_terms else ''
            )
            
            filtered_topics = self.processor.filter_by_relevance_threshold(topics, threshold=3.0)
            
            return filtered_topics[:max_topics]
            
        except Exception as e:
            st.error(f"Hiba a Medline adatok bet√∂lt√©se sor√°n: {e}")
            return []

# =============================================================================
# Moderniz√°lt Keres≈ë Widget
# =============================================================================

class MedlineSearchWidget:
    """
    Modern interakt√≠v Medline keres√©s widget
    """
    
    def __init__(self):
        self.client = MedlineAPIClient()
        self.processor = MedlineDataProcessor()
    
    def display_search_interface(self):
        """Modern keres√©si interf√©sz"""
        
        # Modern fejl√©c gradiens h√°tt√©rrel
        st.markdown("""
            <div style="
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 20px;
                border-radius: 10px;
                margin-bottom: 20px;
                text-align: center;
            ">
                <h2>üîç Medline Plus Keres√©s</h2>
                <p>Keress az eg√©szs√©g√ºgyi inform√°ci√≥k t√°rh√°z√°ban</p>
            </div>
        """, unsafe_allow_html=True)
        
        # Modern keres√©si forma
        with st.container():
            col1, col2 = st.columns([3, 1])
            
            with col1:
                search_term = st.text_input(
                    "üîé Mit keresel?",
                    placeholder="pl. fejf√°j√°s, migraine, diabetes...",
                    label_visibility="collapsed"
                )
            
            with col2:
                search_clicked = st.button("üöÄ Keres√©s", type="primary", use_container_width=True)
        
        # Keres√©si opci√≥k modern togglekkel
        with st.expander("‚öôÔ∏è Keres√©si be√°ll√≠t√°sok", expanded=False):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                max_results = st.select_slider(
                    "Tal√°latok sz√°ma:",
                    options=[3, 5, 10, 15],
                    value=5
                )
            
            with col2:
                language = st.radio(
                    "Nyelv:",
                    options=[("en", "üá∫üá∏ Angol"), ("es", "üá™üá∏ Spanyol")],
                    format_func=lambda x: x[1],
                    horizontal=True
                )
            
            with col3:
                sort_by = st.selectbox(
                    "Rendez√©s:",
                    ["Relevancia", "D√°tum", "Forr√°s"]
                )
        
        # Keres√©s v√©grehajt√°sa
        if search_clicked and search_term:
            self._perform_modern_search(search_term, max_results, language[0])
    
    def _perform_modern_search(self, search_term: str, max_results: int, language: str):
        """Modern keres√©s v√©grehajt√°sa"""
        
        # Bet√∂lt√©s anim√°ci√≥
        with st.spinner(f"üîÑ Keres√©s: '{search_term}'..."):
            try:
                client = MedlineAPIClient(language=language)
                results = client.search_health_topics(search_term, max_results)
                
                if not results:
                    st.warning("üòî Nincs tal√°lat a keres√©si kifejez√©sre.")
                    return
                
                topics = self.processor.process_search_results(
                    results, [search_term], search_term
                )
                
                # Tal√°latok √∂sszefoglal√≥
                st.success(f"‚úÖ {len(topics)} tal√°lat a k√∂vetkez≈ëre: **{search_term}**")
                
                # Modern eredm√©nyek megjelen√≠t√©se
                ui = MedlineUI()
                ui._display_modern_topic_cards(topics, len(topics))
                        
            except Exception as e:
                st.error(f"‚ùå Hiba a keres√©s sor√°n: {e}")

# =============================================================================
# Moderniz√°lt seg√©df√ºggv√©nyek
# =============================================================================

def add_medline_sidebar_options():
    """Modern Medline opci√≥k a sidebar-ban"""
    with st.sidebar:
        st.markdown("""
            <div style="
                background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
                color: white;
                padding: 15px;
                border-radius: 10px;
                margin-bottom: 15px;
                text-align: center;
            ">
                <h3>üè• Medline Plus</h3>
            </div>
        """, unsafe_allow_html=True)
        
        # Kapcsolat √°llapot modern indik√°torral
        display_medline_connection_status()
        
        # Modern toggle switch
        enable_medline = st.toggle(
            "Medline keres√©s aktiv√°l√°sa",
            value=st.session_state.get('medline_enabled', True),
            key="medline_toggle"
        )
        
        if enable_medline:
            st.markdown("### ‚öôÔ∏è Be√°ll√≠t√°sok")
            
            # Modern slider
            max_topics = st.slider(
                "üìö Max t√©m√°k",
                min_value=1,
                max_value=10,
                value=3,
                help="Maxim√°lisan megjelen√≠tett t√©m√°k sz√°ma"
            )
            
            # Modern select
            language = st.selectbox(
                "üåê Nyelv",
                options=[("en", "üá∫üá∏ Angol"), ("es", "üá™üá∏ Spanyol")],
                format_func=lambda x: x[1],
                index=0
            )
            
            # Relevancia vizualiz√°ci√≥
            relevance_threshold = st.slider(
                "üéØ Relevancia sz≈±r≈ë",
                min_value=1.0,
                max_value=30.0,
                value=3.0,
                step=1.0,
                help="Minimum relevancia pontsz√°m (tipikus √©rt√©kek: 3-25)"
            )
            
            # Modern checkbox
            cache_enabled = st.checkbox(
                "üíæ Gyors√≠t√≥t√°r haszn√°lata",
                value=True,
                help="Gyorsabb bet√∂lt√©s ism√©telt keres√©sekn√©l"
            )
            
            # Be√°ll√≠t√°sok ment√©se
            st.session_state.medline_enabled = True
            st.session_state.medline_max_topics = max_topics
            st.session_state.medline_language = language[0]
            st.session_state.medline_relevance_threshold = relevance_threshold
            st.session_state.medline_cache_enabled = cache_enabled
        else:
            st.session_state.medline_enabled = False

def display_medline_connection_status():
    """Modern kapcsolat st√°tusz megjelen√≠t√©se"""
    try:
        from .api_client import test_medline_connection
        
        if test_medline_connection():
            st.markdown("""
                <div style="
                    background-color: #d4edda;
                    color: #155724;
                    padding: 10px;
                    border-radius: 5px;
                    border: 1px solid #c3e6cb;
                    margin-bottom: 10px;
                ">
                    ‚úÖ <strong>Kapcsolat akt√≠v</strong>
                </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown("""
                <div style="
                    background-color: #f8d7da;
                    color: #721c24;
                    padding: 10px;
                    border-radius: 5px;
                    border: 1px solid #f5c6cb;
                    margin-bottom: 10px;
                ">
                    ‚ùå <strong>Kapcsolat nem el√©rhet≈ë</strong>
                </div>
            """, unsafe_allow_html=True)
    except Exception as e:
        st.error(f"‚ùå Kapcsolat hiba: {e}")

# ‚úÖ T√∂bbi f√ºggv√©ny v√°ltozatlan
def create_medline_export_data(topics: List[MedlineTopicSummary]) -> Dict[str, Any]:
    """Medline adatok export√°l√°si form√°tumba alak√≠t√°sa - V√ÅLTOZATLAN"""
    export_data = {
        'medline_topics': [topic.to_dict() for topic in topics],
        'total_topics': len(topics),
        'average_relevance': sum(topic.relevance_score for topic in topics) / len(topics) if topics else 0,
        'top_relevance': max(topic.relevance_score for topic in topics) if topics else 0
    }
    
    return export_data

def integrate_medline_to_medical_summary(diagnosis: str, symptoms: List[str]):
    """Medline szekci√≥ integr√°l√°sa - V√ÅLTOZATLAN"""
    if not diagnosis and not symptoms:
        return
    
    medline_ui = MedlineUI()
    medline_ui.display_medline_section(diagnosis, symptoms)