# =============================================================================
# medline_integration/ui_components.py
# =============================================================================
"""
Medline inform√°ci√≥k megjelen√≠t√©se a Streamlit fel√ºleten.
"""
import streamlit as st
from typing import List, Dict, Any
from .data_processor import MedlineTopicSummary, MedlineDataProcessor
from .api_client import MedlineAPIClient
import re

class MedlineUI:
    """
    Medline inform√°ci√≥k megjelen√≠t√©s√©re szolg√°l√≥ UI komponensek.
    """
    
    def __init__(self):
        self.processor = MedlineDataProcessor()
    
    def display_medline_section(self, diagnosis: str, symptoms: List[str], 
                               max_topics: int = 3, language: str = "en"):
        """
        F≈ë Medline szekci√≥ megjelen√≠t√©se az orvosi √∂sszefoglal√≥ban.
        
        Args:
            diagnosis (str): Diagn√≥zis
            symptoms (List[str]): T√ºnetek list√°ja
            max_topics (int): Maximum megjelen√≠tett t√©m√°k sz√°ma
            language (str): Nyelv (en/es)
        """
        if not diagnosis and not symptoms:
            return
        
        st.markdown("---")
        st.markdown("### üè• Medline Plus - Eg√©szs√©g√ºgyi Inform√°ci√≥k")
        
        # Keres√©si kifejez√©sek el≈ëk√©sz√≠t√©se
        search_terms = self._prepare_search_terms(diagnosis, symptoms)
        
        if not search_terms:
            st.info("Nincs megfelel≈ë keres√©si kifejez√©s a Medline keres√©shez.")
            return
        
        # Medline adatok bet√∂lt√©se
        with st.spinner("Medline Plus inform√°ci√≥k bet√∂lt√©se..."):
            topics = self._load_medline_data(search_terms, max_topics, language)
        
        if not topics:
            st.warning("Nem tal√°lhat√≥k relev√°ns Medline Plus inform√°ci√≥k.")
            return
        
        # T√©m√°k megjelen√≠t√©se
        self._display_topics(topics, max_topics)
        
        # Disclaimer
        self._display_disclaimer()
    
    def _prepare_search_terms(self, diagnosis: str, symptoms: List[str]) -> List[str]:
        """Keres√©si kifejez√©sek el≈ëk√©sz√≠t√©se."""
        search_terms = []
        
        # Diagn√≥zis hozz√°ad√°sa
        if diagnosis:
            cleaned_diagnosis = self._clean_diagnosis(diagnosis)
            if cleaned_diagnosis:
                search_terms.append(cleaned_diagnosis)
        
        # T√ºnetek hozz√°ad√°sa (max 3)
        for symptom in symptoms[:3]:
            if symptom and symptom.strip():
                search_terms.append(symptom.strip())
        
        return list(set(search_terms))  # Duplik√°tumok elt√°vol√≠t√°sa
    
    def _clean_diagnosis(self, diagnosis: str) -> str:
        """Diagn√≥zis tiszt√≠t√°sa keres√©shez."""
        # Felesleges szavak elt√°vol√≠t√°sa
        stop_words = ['lehets√©ges', 'val√≥sz√≠n≈±', 'esetleg', 'tal√°n', 'lehet', 'a', 'az', 'egy']
        
        cleaned = diagnosis.lower()
        for stop_word in stop_words:
            cleaned = re.sub(rf'\b{stop_word}\b', '', cleaned)
        
        # Sz√≥k√∂z√∂k normaliz√°l√°sa
        cleaned = re.sub(r'\s+', ' ', cleaned).strip()
        
        return cleaned if len(cleaned) > 2 else ''
    
    def _load_medline_data(self, search_terms: List[str], max_topics: int, language: str) -> List[MedlineTopicSummary]:
        """Medline adatok bet√∂lt√©se √©s feldolgoz√°sa."""
        try:
            client = MedlineAPIClient(language=language)
            
            # √ñsszes keres√©si kifejez√©s keres√©se
            all_results = []
            for term in search_terms:
                results = client.search_health_topics(term, max_results=5)
                all_results.extend(results)
            
            if not all_results:
                return []
            
            # Feldolgoz√°s √©s rangsorol√°s
            topics = self.processor.process_search_results(
                all_results, 
                search_terms,  # symptoms helyett search_terms
                search_terms[0] if search_terms else ''  # diagnosis helyett els≈ë search_term
            )
            
            # Relevancia sz≈±r√©s
            filtered_topics = self.processor.filter_by_relevance_threshold(topics, threshold=3.0)
            
            return filtered_topics[:max_topics]
            
        except Exception as e:
            st.error(f"Hiba a Medline adatok bet√∂lt√©se sor√°n: {e}")
            return []
    
    def _display_topics(self, topics: List[MedlineTopicSummary], max_topics: int):
        """T√©m√°k megjelen√≠t√©se."""
        for i, topic in enumerate(topics[:max_topics]):
            with st.expander(f"üìñ {topic.title}", expanded=(i == 0)):
                self._display_single_topic(topic)
    
    def _display_single_topic(self, topic: MedlineTopicSummary):
        """Egyetlen t√©ma r√©szletes megjelen√≠t√©se."""
        # Alapinform√°ci√≥k
        col1, col2 = st.columns([3, 1])
        
        with col1:
            # √ñsszefoglal√≥
            if topic.snippet:
                st.markdown(f"**R√∂vid le√≠r√°s:** {topic.snippet}")
            
            # Teljes √∂sszefoglal√≥ (ha van)
            if topic.summary and topic.summary != topic.snippet:
                with st.expander("üîç R√©szletes le√≠r√°s"):
                    # √ñsszefoglal√≥ r√∂vid√≠t√©se, ha t√∫l hossz√∫
                    summary_text = topic.summary
                    if len(summary_text) > 1000:
                        summary_text = summary_text[:1000] + "..."
                    st.markdown(summary_text)
        
        with col2:
            # Relevancia pontsz√°m
            st.metric("Relevancia", f"{topic.relevance_score:.1f}")
            
            # Medline Plus link
            if topic.url:
                st.markdown(f"üîó [Medline Plus]({topic.url})")
        
        # Kateg√≥ri√°k √©s c√≠mk√©k
        if topic.groups or topic.mesh_terms or topic.alt_titles:
            st.markdown("**Kateg√≥ri√°k √©s c√≠mk√©k:**")
            
            # Csoportok
            if topic.groups:
                groups_text = ", ".join(topic.groups)
                st.markdown(f"üìÇ **Csoportok:** {groups_text}")
            
            # MeSH kifejez√©sek
            if topic.mesh_terms:
                mesh_text = ", ".join(topic.mesh_terms)
                st.markdown(f"üè∑Ô∏è **MeSH:** {mesh_text}")
            
            # Alternat√≠v c√≠mek
            if topic.alt_titles:
                alt_titles_text = ", ".join(topic.alt_titles)
                st.markdown(f"üîÑ **Alternat√≠v c√≠mek:** {alt_titles_text}")
        
        # Kulcsinform√°ci√≥k kinyer√©se
        key_info = self.processor.extract_key_information(topic)
        self._display_key_information(key_info)
    
    def _display_key_information(self, key_info: Dict[str, Any]):
        """Kulcsinform√°ci√≥k megjelen√≠t√©se."""
        if not any(key_info.values()):
            return
        
        st.markdown("**Kulcsinform√°ci√≥k:**")
        
        # T√ºnetek
        if key_info.get('symptoms'):
            with st.expander("ü©∫ T√ºnetek"):
                for symptom in key_info['symptoms']:
                    st.markdown(f"‚Ä¢ {symptom}")
        
        # Okok
        if key_info.get('causes'):
            with st.expander("üîç Lehets√©ges okok"):
                for cause in key_info['causes']:
                    st.markdown(f"‚Ä¢ {cause}")
        
        # Kezel√©sek
        if key_info.get('treatments'):
            with st.expander("üíä Kezel√©sek"):
                for treatment in key_info['treatments']:
                    st.markdown(f"‚Ä¢ {treatment}")
        
        # Megel≈ëz√©s
        if key_info.get('prevention'):
            with st.expander("üõ°Ô∏è Megel≈ëz√©s"):
                for prevention in key_info['prevention']:
                    st.markdown(f"‚Ä¢ {prevention}")
        
        # Mikor kell orvoshoz fordulni
        if key_info.get('when_to_see_doctor'):
            with st.expander("‚ö†Ô∏è Mikor kell orvoshoz fordulni"):
                for advice in key_info['when_to_see_doctor']:
                    st.markdown(f"‚Ä¢ {advice}")
    
    def _display_disclaimer(self):
        """Jogi disclaimer megjelen√≠t√©se."""
        st.markdown("---")
        st.info("""
        **üìö Medline Plus inform√°ci√≥k:** 
        A fenti inform√°ci√≥k a Medline Plus adatb√°zis√°b√≥l sz√°rmaznak, 
        amely az Amerikai Nemzeti Eg√©szs√©g√ºgyi K√∂nyvt√°r (NLM) szolg√°ltat√°sa. 
        Ezek az inform√°ci√≥k kiz√°r√≥lag t√°j√©koztat√≥ jelleg≈±ek √©s nem helyettes√≠tik 
        a szakorvosi konzult√°ci√≥t.
        """)

# =============================================================================
# Kieg√©sz√≠t≈ë UI komponensek
# =============================================================================

class MedlineSearchWidget:
    """
    Interakt√≠v Medline keres√©s widget.
    """
    
    def __init__(self):
        self.client = MedlineAPIClient()
        self.processor = MedlineDataProcessor()
    
    def display_search_interface(self):
        """Keres√©si interf√©sz megjelen√≠t√©se."""
        st.markdown("### üîç Medline Plus Keres√©s")
        
        # Keres√©si forma
        with st.form("medline_search_form"):
            search_term = st.text_input(
                "Keres√©si kifejez√©s:", 
                placeholder="pl. fejf√°j√°s, migraine, headache"
            )
            
            col1, col2 = st.columns(2)
            with col1:
                max_results = st.selectbox("Eredm√©nyek sz√°ma:", [3, 5, 10], index=0)
            with col2:
                language = st.selectbox("Nyelv:", [("Angol", "en"), ("Spanyol", "es")], index=0)
            
            submitted = st.form_submit_button("üîç Keres√©s")
        
        if submitted and search_term:
            self._perform_search(search_term, max_results, language[1])
    
    def _perform_search(self, search_term: str, max_results: int, language: str):
        """Keres√©s v√©grehajt√°sa √©s eredm√©nyek megjelen√≠t√©se."""
        with st.spinner("Keres√©s folyamatban..."):
            try:
                client = MedlineAPIClient(language=language)
                results = client.search_health_topics(search_term, max_results)
                
                if not results:
                    st.warning("Nincs tal√°lat a keres√©si kifejez√©sre.")
                    return
                
                # Eredm√©nyek feldolgoz√°sa
                topics = self.processor.process_search_results(
                    results, [search_term], search_term
                )
                
                # Eredm√©nyek megjelen√≠t√©se
                st.success(f"Tal√°latok sz√°ma: {len(topics)}")
                
                ui = MedlineUI()
                for topic in topics:
                    with st.expander(f"üìñ {topic.title}"):
                        ui._display_single_topic(topic)
                        
            except Exception as e:
                st.error(f"Hiba a keres√©s sor√°n: {e}")

# =============================================================================
# Seg√©df√ºggv√©nyek
# =============================================================================

def display_medline_connection_status():
    """Medline kapcsolat √°llapot√°nak megjelen√≠t√©se."""
    try:
        from .api_client import test_medline_connection
        
        if test_medline_connection():
            st.success("‚úÖ Medline Plus kapcsolat akt√≠v")
        else:
            st.error("‚ùå Medline Plus kapcsolat nem el√©rhet≈ë")
    except Exception as e:
        st.error(f"‚ùå Medline Plus kapcsolat hiba: {e}")

def create_medline_export_data(topics: List[MedlineTopicSummary]) -> Dict[str, Any]:
    """Medline adatok export√°l√°si form√°tumba alak√≠t√°sa."""
    export_data = {
        'medline_topics': [topic.to_dict() for topic in topics],
        'total_topics': len(topics),
        'average_relevance': sum(topic.relevance_score for topic in topics) / len(topics) if topics else 0,
        'top_relevance': max(topic.relevance_score for topic in topics) if topics else 0
    }
    
    return export_data

# =============================================================================
# Medline integr√°ci√≥ a megl√©v≈ë medical_summary.py-ba
# =============================================================================

def integrate_medline_to_medical_summary(diagnosis: str, symptoms: List[str]):
    """
    Medline szekci√≥ integr√°l√°sa a megl√©v≈ë medical_summary.py-ba.
    
    Ezt a f√ºggv√©nyt h√≠vd meg a display_medical_summary() v√©g√©n.
    """
    # Ellen≈ërizz√ºk, hogy van-e diagnosis vagy symptoms
    if not diagnosis and not symptoms:
        return
    
    # Medline UI l√©trehoz√°sa √©s megjelen√≠t√©se
    medline_ui = MedlineUI()
    medline_ui.display_medline_section(diagnosis, symptoms)

# =============================================================================
# Streamlit sidebar integr√°ci√≥
# =============================================================================

def add_medline_sidebar_options():
    """Medline opci√≥k hozz√°ad√°sa a sidebar-hoz."""
    with st.sidebar:
        # Teljes Medline szekci√≥ egy expander-ben
        with st.expander("üè• Medline Plus Keres√©s"):
            # Kapcsolat √°llapot
            display_medline_connection_status()
            
            # Medline keres√©s enged√©lyez√©se
            enable_medline = st.checkbox("Medline Plus keres√©s enged√©lyez√©se", value=True)
            
            if enable_medline:
                st.markdown("**‚öôÔ∏è Keres√©si be√°ll√≠t√°sok:**")
                
                max_topics = st.slider("Maximum t√©m√°k sz√°ma:", 1, 10, 3)
                language = st.selectbox("Keres√©si nyelv:", [("Angol", "en"), ("Spanyol", "es")], index=0)
                relevance_threshold = st.slider("Relevancia k√ºsz√∂b:", 1.0, 10.0, 3.0, 0.5)
                cache_enabled = st.checkbox("Cache enged√©lyez√©se", value=True)
                
                # Be√°ll√≠t√°sok ment√©se session state-be
                st.session_state.medline_enabled = True
                st.session_state.medline_max_topics = max_topics
                st.session_state.medline_language = language[1]
                st.session_state.medline_relevance_threshold = relevance_threshold
                st.session_state.medline_cache_enabled = cache_enabled
            else:
                st.session_state.medline_enabled = False