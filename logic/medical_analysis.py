# =============================================================================
# logic/medical_analysis.py
# =============================================================================
"""
Orvosi elemz√©s √©s triage d√∂nt√©sek.
"""
import re
from core import ALTERNATIVE_TIPS

def triage_decision(data):
    """Triage d√∂nt√©s a betegadatok alapj√°n."""
    symptoms = data.get("symptoms", [])
    severity = data.get("severity", "")
    duration = data.get("duration", "")
    
    # Biztons√°gosabb regex kezel√©s
    duration_days = 0
    if duration:
        match = re.search(r"\d+", duration)
        if match:
            try:
                duration_days = int(match.group())
            except ValueError:
                duration_days = 0

    # S√ºrg≈ës esetek
    if "mellkasi f√°jdalom" in symptoms or "l√©gszomj" in symptoms:
        return "üî¥ A t√ºnetei alapj√°n azonnali eg√©szs√©g√ºgyi ell√°t√°s javasolt."
    
    # K√∂zepes s√ºrg≈ëss√©g
    elif severity == "s√∫lyos" or ("l√°z" in symptoms and "torokf√°j√°s" in symptoms and duration_days > 3):
        return "üü° Javasolt orvossal konzult√°lnia."
    
    # Enyhe esetek
    else:
        return "üîµ A t√ºnetei alapj√°n val√≥sz√≠n≈±leg elegend≈ë lehet az otthoni megfigyel√©s."

def alternative_recommendations(symptoms):
    """Alternat√≠v ter√°pi√°s javaslatok a t√ºnetek alapj√°n."""
    if not symptoms:
        return "Nincs elegend≈ë t√ºnet az alternat√≠v javaslatok megad√°s√°hoz."
    
    tips = []
    for symptom in symptoms:
        if symptom in ALTERNATIVE_TIPS:
            tips.append(f"**{symptom.title()}:** {ALTERNATIVE_TIPS[symptom]}")
    
    return "\n".join(tips) if tips else "Nincs specifikus alternat√≠v javaslat ezekre a t√ºnetekre."

def assess_symptom_severity(symptoms, severity, duration):
    """T√ºnetek s√∫lyoss√°g√°nak √©rt√©kel√©se."""
    risk_factors = []
    
    # Magas kock√°zat√∫ t√ºnetek
    high_risk_symptoms = ["mellkasi f√°jdalom", "l√©gszomj", "eszm√©letveszt√©s", "er≈ës fejf√°j√°s"]
    for symptom in high_risk_symptoms:
        if symptom in symptoms:
            risk_factors.append(f"Magas kock√°zat√∫ t√ºnet: {symptom}")
    
    # S√∫lyoss√°g √©rt√©kel√©se
    if severity == "s√∫lyos":
        risk_factors.append("P√°ciens s√∫lyosnak √≠t√©li a t√ºneteket")
    
    # Id≈ëtartam √©rt√©kel√©se
    if duration and "h√©t" in duration.lower():
        risk_factors.append("T√ºnetek egy hete vagy hosszabb ideje tartanak")
    
    return risk_factors

def generate_medical_summary(patient_data, diagnosis, triage_level, alt_therapy, gpt_alt_therapy, specialist_advice):
    """Teljes orvosi √∂sszefoglal√≥ gener√°l√°sa."""
    summary = {
        "patient_info": {
            "age": patient_data.get("age"),
            "gender": patient_data.get("gender"),
            "symptoms": patient_data.get("symptoms", []),
            "duration": patient_data.get("duration"),
            "severity": patient_data.get("severity"),
            "existing_conditions": patient_data.get("existing_conditions", []),
            "medications": patient_data.get("medications", [])
        },
        "medical_assessment": {
            "triage_level": triage_level,
            "diagnosis": diagnosis,
            "alternative_therapy": alt_therapy,
            "gpt_alternative_therapy": gpt_alt_therapy,
            "specialist_advice": specialist_advice
        },
        "risk_assessment": assess_symptom_severity(
            patient_data.get("symptoms", []),
            patient_data.get("severity"),
            patient_data.get("duration")
        )
    }
    
    return summary