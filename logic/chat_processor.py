# =============================================================================
# logic/chat_processor.py
# =============================================================================
"""
Chat input feldolgoz√°sa √©s v√°laszgener√°l√°s.
"""
import streamlit as st
from core import has_sufficient_data
from .data_extraction import extract_all_medical_info
from .gpt_communication import get_next_question_gpt, generate_diagnosis, generate_alt_therapy, generate_specialist_advice
from .medical_analysis import triage_decision, alternative_recommendations

def process_chat_input_enhanced(user_input):
    """Tov√°bbfejlesztett chat input feldolgoz√°s GPT k√©rd√©sekkel."""
    try:
        # Adatok kinyer√©se
        extract_all_medical_info(user_input)
        
        # Ellen≈ërizz√ºk az √°llapotot
        if has_sufficient_data():
            if not st.session_state.triage_level:
                # √ârt√©kel√©s ind√≠t√°sa
                data = st.session_state.patient_data
                assistant_reply = "‚úÖ K√∂sz√∂n√∂m! √ñsszegy≈±jt√∂ttem az adatokat:\n\n"
                assistant_reply += f"‚Ä¢ **T√ºnetek:** {', '.join(data.get('symptoms', []))}\n"
                if data.get('duration'): 
                    assistant_reply += f"‚Ä¢ **Id≈ëtartam:** {data['duration']}\n"
                if data.get('severity'): 
                    assistant_reply += f"‚Ä¢ **S√∫lyoss√°g:** {data['severity']}\n"
                if data.get('age'): 
                    assistant_reply += f"‚Ä¢ **√âletkor:** {data['age']} √©v\n"
                if data.get('gender'): 
                    assistant_reply += f"‚Ä¢ **Nem:** {data['gender']}\n"
                
                assistant_reply += "\nüîÑ **Orvosi √©rt√©kel√©s k√©sz√≠t√©se...**"
                
                # √ârt√©kel√©sek futtat√°sa
                st.session_state.triage_level = triage_decision(st.session_state.patient_data)
                st.session_state.alt_therapy = alternative_recommendations(st.session_state.patient_data["symptoms"])
                st.session_state.diagnosis = generate_diagnosis(st.session_state.patient_data["symptoms"])
                st.session_state.gpt_alt_therapy = generate_alt_therapy(st.session_state.patient_data["symptoms"], st.session_state.diagnosis)
                st.session_state.gpt_specialist_advice = generate_specialist_advice(st.session_state.patient_data["symptoms"], st.session_state.diagnosis)
                
                return assistant_reply
            else:
                return "Az orvosi √©rt√©kel√©s m√°r elk√©sz√ºlt."
        else:
            # GPT alap√∫ k√∂vetkez≈ë k√©rd√©s
            next_question = get_next_question_gpt()
            
            # Ha siker√ºlt adatot kinyerni, meger≈ës√≠tj√ºk
            if st.session_state.patient_data.get('symptoms'):
                symptoms = ', '.join(st.session_state.patient_data['symptoms'])
                # Csak akkor tesz√ºnk hozz√° meger≈ës√≠t√©st, ha m√©g nincs benne
                if "r√∂gz√≠tettem" not in next_question.lower() and "k√∂sz√∂n√∂m" not in next_question.lower():
                    next_question = f"K√∂sz√∂n√∂m! R√∂gz√≠tettem: {symptoms}.\n\n{next_question}"
            
            return next_question

    except Exception as e:
        return f"Hiba t√∂rt√©nt: {str(e)}. Pr√≥b√°lja √∫jra!"

def is_evaluation_complete():
    """Ellen≈ërzi, hogy az orvosi √©rt√©kel√©s elk√©sz√ºlt-e."""
    return bool(st.session_state.triage_level)

def get_evaluation_status():
    """Visszaadja az √©rt√©kel√©s st√°tusz√°t."""
    return {
        "has_sufficient_data": has_sufficient_data(),
        "evaluation_complete": is_evaluation_complete(),
        "triage_done": bool(st.session_state.triage_level),
        "diagnosis_done": bool(st.session_state.diagnosis),
        "therapy_done": bool(st.session_state.gpt_alt_therapy),
        "specialist_done": bool(st.session_state.gpt_specialist_advice)
    }