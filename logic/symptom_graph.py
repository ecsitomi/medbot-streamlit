# =============================================================================
# logic/symptom_graph.py
# =============================================================================
"""
T√ºnet-√∂sszef√ºgg√©sek √©s intelligens follow-up k√©rd√©sek kezel√©se.
A megl√©v≈ë medical chatbot t√ºneteivel kompatibilis reasoning motor.
"""

# T√ºnet-kapcsolati szab√°lyok a megl√©v≈ë t√ºnetekkel
# Kulcs: tuple a t√ºnetekb≈ël, √ârt√©k: follow-up k√©rd√©sek list√°ja
SYMPTOM_DEPENDENCIES = {
    # Fert≈ëz√©ses t√ºnetek kombin√°ci√≥ja
    ("l√°z", "f√°radts√°g"): [
        "Milyen magas volt legut√≥bb a l√°za? (pl. 38¬∞C, 39¬∞C)",
        "J√≥l tudott aludni az √©jjel, vagy zavarta a betegs√©g?"
    ],
    
    ("l√°z", "torokf√°j√°s"): [
        "Nehez√©re esik a nyel√©s?",
        "Van-e k√∂h√∂g√©se is a torokf√°j√°s mellett?"
    ],
    
    ("l√°z", "k√∂h√∂g√©s"): [
        "Milyen t√≠pus√∫ a k√∂h√∂g√©se? (sz√°raz vagy v√°lad√©kos)",
        "Van-e mellkasi f√°jdalma a k√∂h√∂g√©skor?"
    ],
    
    # Em√©szt≈ërendszeri probl√©m√°k
    ("h√°ny√°s", "hasmen√©s"): [
        "H√°ny alkalommal fordult el≈ë a h√°ny√°s az elm√∫lt 24 √≥r√°ban?",
        "Van-e hasf√°j√°sa is a t√ºnetek mellett?"
    ],
    
    ("hasmen√©s", "f√°radts√°g"): [
        "Elegend≈ë folyad√©kot fogyaszt? (fontos a kisz√°rad√°s elker√ºl√©se)",
        "Van-e sz√©d√ºl√©se is?"
    ],
    
    # Neurol√≥giai/√°ltal√°nos t√ºnetek
    ("fejf√°j√°s", "f√°radts√°g"): [
        "Milyen jelleg≈± a fejf√°j√°sa? (tompa, l√ºktet≈ë, sz√∫r√≥)",
        "Befoly√°solja-e a f√©ny vagy a zaj a fejf√°j√°s√°t?"
    ],
    
    ("fejf√°j√°s", "l√°z"): [
        "Van-e nyaki merevs√©ge?",
        "√âmelyeg vagy h√°nyinger is t√°rsul a fejf√°j√°shoz?"
    ],
    
    # L√©g√∫ti probl√©m√°k
    ("torokf√°j√°s", "k√∂h√∂g√©s"): [
        "Mikor rosszabb a torokf√°j√°s? (reggel, este, nyel√©skor)",
        "L√°that√≥-e valamilyen elv√°ltoz√°s a torokban? (v√∂r√∂ss√©g, foltok)"
    ]
}

# Egyedi t√ºnetek eset√©n is adhatunk speci√°lis k√©rd√©seket
SINGLE_SYMPTOM_QUESTIONS = {
    "fejf√°j√°s": [
        "Hol √©rzi legink√°bb a fejf√°j√°st? (homlok, hal√°nt√©k, tark√≥)"
    ],
    
    "l√°z": [
        "M√©rte-e a testh≈ëm√©rs√©klet√©t? Ha igen, mennyi volt?"
    ],
    
    "k√∂h√∂g√©s": [
        "Mikor rosszabb a k√∂h√∂g√©s? (√©jjel, reggel, fizikai aktivit√°skor)"
    ],
    
    "torokf√°j√°s": [
        "A torokf√°j√°s mellett van-e duzzadt nyirokcsom√≥ a nyak√°n?"
    ],
    
    "hasmen√©s": [
        "Milyen gyakori a hasmen√©s? (naponta h√°nyszor)"
    ],
    
    "h√°ny√°s": [
        "Mi v√°ltotta ki a h√°ny√°st? (√©tkez√©s, szag, mozg√°s)"
    ],
    
    "f√°radts√°g": [
        "A f√°radts√°g mikor jelentkezik legink√°bb? (reggel, este, eg√©sz nap)"
    ]
}

def get_symptom_combinations(symptoms_list):
    """
    Megkeresi az √∂sszes lehets√©ges t√ºnet-kombin√°ci√≥t a SYMPTOM_DEPENDENCIES alapj√°n.
    
    Args:
        symptoms_list (list): A p√°ciens t√ºneteinek list√°ja
        
    Returns:
        list: Tal√°lt kombin√°ci√≥k kulcsai
    """
    if not symptoms_list or len(symptoms_list) < 2:
        return []
    
    found_combinations = []
    symptoms_set = set(symptoms_list)
    
    for combo_key in SYMPTOM_DEPENDENCIES.keys():
        if set(combo_key).issubset(symptoms_set):
            found_combinations.append(combo_key)
    
    return found_combinations

def get_suggested_followup_questions(symptoms_list, asked_questions=None):
    """
    T√ºnet-alap√∫ follow-up k√©rd√©sek gener√°l√°sa.
    
    Args:
        symptoms_list (list): A p√°ciens t√ºneteinek list√°ja
        asked_questions (set, optional): M√°r feltett k√©rd√©sek (ism√©tl√©s elker√ºl√©se)
        
    Returns:
        dict: {
            'combination_questions': [...],  # T√ºnet-kombin√°ci√≥ alap√∫ k√©rd√©sek
            'single_questions': [...],       # Egyedi t√ºnet k√©rd√©sek
            'source_combinations': [...]     # Melyik kombin√°ci√≥b√≥l j√∂ttek a k√©rd√©sek
        }
    """
    if asked_questions is None:
        asked_questions = set()
    
    result = {
        'combination_questions': [],
        'single_questions': [],
        'source_combinations': []
    }
    
    # Kombin√°ci√≥s k√©rd√©sek keres√©se
    combinations = get_symptom_combinations(symptoms_list)
    
    for combo in combinations:
        questions = SYMPTOM_DEPENDENCIES[combo]
        for question in questions:
            if question not in asked_questions:
                result['combination_questions'].append(question)
                result['source_combinations'].append(combo)
    
    # Egyedi t√ºnet k√©rd√©sek (ha nincs kombin√°ci√≥, vagy kieg√©sz√≠t√©sk√©nt)
    if not result['combination_questions']:
        for symptom in symptoms_list:
            if symptom in SINGLE_SYMPTOM_QUESTIONS:
                questions = SINGLE_SYMPTOM_QUESTIONS[symptom]
                for question in questions:
                    if question not in asked_questions:
                        result['single_questions'].append(question)
    
    return result

def has_reasoning_questions_available(symptoms_list, asked_questions=None):
    """
    Ellen≈ërzi, hogy vannak-e el√©rhet≈ë reasoning k√©rd√©sek.
    
    Args:
        symptoms_list (list): A p√°ciens t√ºneteinek list√°ja
        asked_questions (set, optional): M√°r feltett k√©rd√©sek
        
    Returns:
        bool: True, ha vannak el√©rhet≈ë k√©rd√©sek
    """
    suggestions = get_suggested_followup_questions(symptoms_list, asked_questions)
    return bool(suggestions['combination_questions'] or suggestions['single_questions'])

def get_next_reasoning_question(symptoms_list, asked_questions=None):
    """
    A k√∂vetkez≈ë reasoning k√©rd√©s kiv√°laszt√°sa priorit√°s alapj√°n.
    
    Priorit√°s:
    1. Kombin√°ci√≥s k√©rd√©sek (t√∂bb t√ºnet √∂sszef√ºgg√©se)
    2. Egyedi t√ºnet k√©rd√©sek
    
    Args:
        symptoms_list (list): A p√°ciens t√ºneteinek list√°ja
        asked_questions (set, optional): M√°r feltett k√©rd√©sek
        
    Returns:
        str or None: A k√∂vetkez≈ë k√©rd√©s, vagy None ha nincs t√∂bb
    """
    suggestions = get_suggested_followup_questions(symptoms_list, asked_questions)
    
    # Priorit√°s: kombin√°ci√≥s k√©rd√©sek el≈ësz√∂r
    if suggestions['combination_questions']:
        return suggestions['combination_questions'][0]
    
    # Ha nincs kombin√°ci√≥s, akkor egyedi
    if suggestions['single_questions']:
        return suggestions['single_questions'][0]
    
    return None

def get_reasoning_context(symptoms_list):
    """
    Kontextus inform√°ci√≥ a reasoning k√©rd√©sekhez (debugging/logging c√©lra).
    
    Args:
        symptoms_list (list): A p√°ciens t√ºneteinek list√°ja
        
    Returns:
        dict: Kontextus inform√°ci√≥k
    """
    combinations = get_symptom_combinations(symptoms_list)
    
    return {
        'total_symptoms': len(symptoms_list),
        'symptoms': symptoms_list,
        'found_combinations': combinations,
        'has_combinations': len(combinations) > 0,
        'available_single_questions': [s for s in symptoms_list if s in SINGLE_SYMPTOM_QUESTIONS]
    }

# Tesztel√©shez √©s debugging c√©lra
def _debug_symptom_analysis(symptoms_list):
    """
    Debug inform√°ci√≥k a t√ºnet elemz√©sr≈ël.
    Csak development/testing c√©lra.
    """
    print(f"üîç Symptom Analysis Debug:")
    print(f"Input symptoms: {symptoms_list}")
    
    context = get_reasoning_context(symptoms_list)
    print(f"Context: {context}")
    
    suggestions = get_suggested_followup_questions(symptoms_list)
    print(f"Suggestions: {suggestions}")
    
    next_question = get_next_reasoning_question(symptoms_list)
    print(f"Next reasoning question: {next_question}")
    
    return {
        'context': context,
        'suggestions': suggestions,
        'next_question': next_question
    }