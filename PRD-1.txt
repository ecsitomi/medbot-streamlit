🧾 PRD – Kontextusérzékeny kérdésgenerálás fejlesztése (Medical Chatbot)
🧠 1. Cél
A chatbot többkörös, kontextusérzékeny anamnézisinterjút tudjon lefolytatni, amely a meglévő struktúrában marad, de:

- célzottabb kérdéseket tesz fel tünetösszefüggések alapján,

- képes egyszerű válaszokat pontosan értelmezni (pl. „34” → age = 34),

- rugalmasan kezeli a felhasználói stílusokat,

- egységesíti és központosítja a GPT promptgenerálást.

🔍 2. Problémák jelenleg
A chatbot sablonos promptok alapján kérdez, mindig csak a következő mezőre fókuszál.

Nem veszi figyelembe a meglévő tünetekből levonható következtetéseket.

Egyszerű válaszokat (pl. csak szám) csak explicit kulcsszavakkal ismer fel.

A GPT prompt-összeállítás szétszórva, nehezen bővíthető.

🧩 3. Funkciók

Modul   >>    Funkció   >>  Leírás

symptom_graph.py   >>    Tünetkapcsolati szabálymotor   >>    Előre definiált tünetkombinációk alapján extra kérdéseket javasol

prompt_builder.py   >>    Intelligens GPT promptgenerálás   >>    Kontextus, hangnem, nyelv alapján egységes kérdés prompt építése

manual_extract_info() bővítése   >>    Rugalmas válaszértelmezés   >>    Szám vagy szimpla szó alapján (pl. „férfi”) is felismeri a mezőt

get_next_question_gpt() kiegészítése   >>    Reasoning-kérdés elsőbbség   >>    Először a symptom_graph kérdéseit teszi fel, utána hiányzó mezőre fókuszál

📄 4. Elfogadási kritériumok

Funkció   >>    Kritérium

Tüneti reasoning működik   >>    Ha „láz” és „fáradtság” szerepel, felteszi az alvásminőségre vagy lázmérésre vonatkozó kérdést

GPT kérdés sablonosodik   >>    Minden GPT kérdés a prompt_builder.py-ből jön, nem duplikált
Szimpla válaszok felismerése   >>    „34” → age = 34, „férfi” → gender = férfi, „2 napja” → duration = 2 nap

Kontextus figyelembevétel   >>    A következő kérdés figyelembe veszi a már összegyűjtött adatokat és tüneteket

🧰 5. Modulrészletek
symptom_graph.py

SYMPTOM_DEPENDENCIES = {
    ("láz", "fáradtság"): ["Milyen magas volt legutóbb a láza?", "Jól tudott aludni az éjjel?"],
    ("torokfájás", "láz"): ["Nehezére esik a nyelés?", "Van-e köhögése is?"]
}

def get_suggested_followup_questions(symptoms: list) -> list:
    # Visszaadja a kapcsolódó kérdéseket, ha tünetkombináció egyezik

###

prompt_builder.py

def build_next_question_prompt(missing_field: str, tone="friendly", language="hu") -> dict:
    # Összeállítja a GPT számára a system + user promptokat a kontextus alapján
manual_extract_info() (kiterjesztés)
Regex segítségével az „életkor”, „nem”, „időtartam”, „súlyosság” mezők rugalmas felismerése

Példa: re.search(r"\b(\d{1,2})\b", input) → age

🔗 6. Architektúrában való elhelyezés

logic/
├── gpt_communication.py      → hasznosítja a prompt_builder modult
├── symptom_graph.py          → új modul, opcionális follow-up kérdésekkel
├── chat_processor.py         → először megkérdezi a symptom_graph javaslatait
├── data_extraction.py        → bővített manual extract


