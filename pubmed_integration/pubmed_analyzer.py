# pubmed_integration/pubmed_analyzer.py
"""
PubMed alap√∫ orvosi kutat√°s √©s elemz√©s
"""
import os
import streamlit as st
from typing import Dict, Any, List, Optional
from datetime import datetime
import json
from pathlib import Path

from langchain_community.tools.pubmed.tool import PubmedQueryRun
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

from .config import PUBMED_CONFIG, PUBMED_DATA_DIR

class PubMedAnalyzer:
    """PubMed alap√∫ orvosi elemz≈ë"""
    
    def __init__(self, openai_api_key: str = None):
        # API kulcs
        if not openai_api_key:
            openai_api_key = os.getenv("OPENAI_API_KEY") or st.secrets.get("OPENAI_API_KEY")
        
        if not openai_api_key:
            raise ValueError("OpenAI API key nem tal√°lhat√≥")
        
        self.api_key = openai_api_key
        
        # PubMed tool inicializ√°l√°sa
        self.pubmed_tool = PubmedQueryRun()
        
        # LLM inicializ√°l√°sa
        self.llm = ChatOpenAI(
            openai_api_key=self.api_key,
            model=PUBMED_CONFIG["llm"]["model"],
            temperature=PUBMED_CONFIG["llm"]["temperature"],
            max_tokens=PUBMED_CONFIG["llm"]["max_tokens"]
        )
        
        # Ford√≠t√≥ LLM (kisebb modell a k√∂lts√©ghat√©konys√°g miatt)
        self.translator = ChatOpenAI(
            openai_api_key=self.api_key,
            model="gpt-3.5-turbo",
            temperature=0
        )
    
    def translate_to_english(self, text: str) -> str:
        """Magyar sz√∂veg ford√≠t√°sa angolra"""
        if not text:
            return ""
        
        prompt = f"Translate this Hungarian medical text to English. Only return the translation, nothing else:\n{text}"
        return self.translator.predict(prompt).strip()
    
    def translate_patient_data(self, patient_data: Dict[str, Any]) -> Dict[str, Any]:
        """Betegadatok ford√≠t√°sa angolra a PubMed keres√©shez"""
        translated = {}
        
        # T√ºnetek ford√≠t√°sa
        symptoms = patient_data.get('symptoms', [])
        if symptoms:
            translated['symptoms'] = [self.translate_to_english(s) for s in symptoms if s]
        
        # Diagn√≥zis ford√≠t√°sa
        diagnosis = patient_data.get('diagnosis', '')
        if diagnosis:
            translated['diagnosis'] = self.translate_to_english(diagnosis)
        
        # Egy√©b mez≈ëk ford√≠t√°sa
        if patient_data.get('existing_conditions'):
            translated['existing_conditions'] = [
                self.translate_to_english(c) for c in patient_data['existing_conditions'] if c
            ]
        
        if patient_data.get('medications'):
            translated['medications'] = [
                self.translate_to_english(m) for m in patient_data['medications'] if m
            ]
        
        # Sz√°m√©rt√©kek √°tv√©tele v√°ltoztat√°s n√©lk√ºl
        translated['age'] = patient_data.get('age')
        translated['gender'] = patient_data.get('gender')
        translated['severity'] = patient_data.get('severity')
        translated['duration'] = patient_data.get('duration')
        
        return translated
    
    def build_search_query(self, translated_data: Dict[str, Any], rag_results: Dict[str, Any] = None) -> str:
        """PubMed keres√©si query √∂ssze√°ll√≠t√°sa"""
        query_parts = []
        
        # F≈ë t√ºnetek
        if translated_data.get('symptoms'):
            symptoms_str = " AND ".join(f'"{s}"' for s in translated_data['symptoms'][:3])
            query_parts.append(f"({symptoms_str})")
        
        # Diagn√≥zis
        if translated_data.get('diagnosis'):
            query_parts.append(f'"{translated_data["diagnosis"]}"')
        
        # Ha van RAG eredm√©ny, haszn√°ljuk azt is
        if rag_results and rag_results.get('patient_condition'):
            # Kivonjuk a kulcsszavakat a RAG eredm√©nyb≈ël
            condition_text = self.translate_to_english(rag_results['patient_condition'])
            # Csak az els≈ë mondatot haszn√°ljuk
            if condition_text:
                first_sentence = condition_text.split('.')[0]
                query_parts.append(f"({first_sentence})")
        
        # √âletkor √©s nem sz≈±r≈ëk
        age = translated_data.get('age')
        if age:
            if age < 18:
                query_parts.append("pediatric OR children")
            elif age > 65:
                query_parts.append("elderly OR geriatric")
        
        # Query √∂ssze√°ll√≠t√°sa
        final_query = " AND ".join(query_parts) if query_parts else "medical treatment"
        
        # Limit√°ljuk a query hossz√°t
        if len(final_query) > 200:
            final_query = final_query[:200]
        
        return final_query
    
    def search_pubmed(self, query: str) -> str:
        """PubMed keres√©s v√©grehajt√°sa"""
        try:
            st.info(f"üîç PubMed keres√©s: {query[:100]}...")
            results = self.pubmed_tool.invoke(query)
            return results
        except Exception as e:
            st.error(f"PubMed keres√©si hiba: {e}")
            return ""
    
    def analyze_pubmed_results(self, pubmed_results: str, patient_data: Dict[str, Any], 
                             rag_results: Dict[str, Any] = None) -> Dict[str, Any]:
        """PubMed eredm√©nyek elemz√©se √©s magyar nyelv≈± √∂sszefoglal√≥ k√©sz√≠t√©se"""
        
        if not pubmed_results:
            return self._create_empty_result()
        
        # Prompt template az elemz√©shez
        analysis_prompt = PromptTemplate(
            input_variables=["pubmed_results", "patient_info", "rag_context"],
            template="""Te egy orvosi szak√©rt≈ë vagy, aki a legfrissebb PubMed publik√°ci√≥k alapj√°n ad tan√°csokat.

PubMed keres√©si eredm√©nyek:
{pubmed_results}

Beteg inform√°ci√≥k:
{patient_info}

Kor√°bbi elemz√©s (ha van):
{rag_context}

K√©rlek k√©sz√≠ts MAGYAR nyelv≈± r√©szletes elemz√©st a k√∂vetkez≈ë strukt√∫r√°ban:

1. **Legfrissebb kutat√°si eredm√©nyek** - Mit mondanak a leg√∫jabb publik√°ci√≥k a beteg √°llapot√°r√≥l?
2. **Aj√°nlott kezel√©si m√≥dszerek** - Milyen evidencia-alap√∫ kezel√©seket javasolnak a cikkek?
3. **Klinikai ir√°nyelvek** - Vannak-e specifikus protokollok vagy guidelines?
4. **Progn√≥zis √©s kil√°t√°sok** - Mit mutatnak a kutat√°sok a gy√≥gyul√°si es√©lyekr≈ël?
5. **Tov√°bbi vizsg√°latok** - Milyen tov√°bbi vizsg√°latokat javasolnak a publik√°ci√≥k?

FONTOS: A v√°laszod legyen MAGYAR nyelv≈±, k√∂z√©rthet≈ë √©s praktikus!
"""
        )
        
        # LLM chain
        chain = LLMChain(llm=self.llm, prompt=analysis_prompt)
        
        # Beteg info √∂sszefoglal√°sa
        patient_info = self._format_patient_info(patient_data)
        
        # RAG kontextus
        rag_context = ""
        if rag_results:
            rag_context = f"""
            √Ållapot: {rag_results.get('patient_condition', 'N/A')}
            Javasolt kezel√©s: {rag_results.get('symptom_management', 'N/A')}
            """
        
        try:
            # Elemz√©s futtat√°sa
            response = chain.run(
                pubmed_results=pubmed_results[:3000],  # Limit√°ljuk a hosszt
                patient_info=patient_info,
                rag_context=rag_context
            )
            
            # V√°lasz feldolgoz√°sa
            return self._parse_analysis_response(response)
            
        except Exception as e:
            st.error(f"PubMed elemz√©si hiba: {e}")
            return self._create_empty_result()
    
    def _format_patient_info(self, patient_data: Dict[str, Any]) -> str:
        """Beteg inform√°ci√≥k form√°z√°sa"""
        info_parts = []
        
        if patient_data.get('age'):
            info_parts.append(f"√âletkor: {patient_data['age']} √©v")
        
        if patient_data.get('gender'):
            info_parts.append(f"Nem: {patient_data['gender']}")
        
        if patient_data.get('symptoms'):
            info_parts.append(f"T√ºnetek: {', '.join(patient_data['symptoms'])}")
        
        if patient_data.get('diagnosis'):
            info_parts.append(f"Diagn√≥zis: {patient_data['diagnosis']}")
        
        if patient_data.get('severity'):
            info_parts.append(f"S√∫lyoss√°g: {patient_data['severity']}")
        
        return " | ".join(info_parts)
    
    def _parse_analysis_response(self, response: str) -> Dict[str, Any]:
        """AI v√°lasz struktur√°lt form√°ba alak√≠t√°sa"""
        sections = {
            "research_findings": "",
            "treatment_methods": "",
            "clinical_guidelines": "",
            "prognosis": "",
            "further_tests": ""
        }
        
        # Egyszer≈± szekci√≥ felismer√©s
        current_section = None
        lines = response.split('\n')
        
        section_keywords = {
            "research_findings": ["kutat√°si eredm√©nyek", "publik√°ci√≥k", "tanulm√°nyok"],
            "treatment_methods": ["kezel√©si", "ter√°pia", "gy√≥gyszer"],
            "clinical_guidelines": ["ir√°nyelvek", "protokoll", "guidelines"],
            "prognosis": ["progn√≥zis", "kil√°t√°sok", "gy√≥gyul√°s"],
            "further_tests": ["vizsg√°latok", "diagnosztika", "tesztek"]
        }
        
        for line in lines:
            line_lower = line.lower()
            
            # Szekci√≥ azonos√≠t√°sa
            for section, keywords in section_keywords.items():
                if any(keyword in line_lower for keyword in keywords):
                    current_section = section
                    break
            
            # Tartalom hozz√°ad√°sa
            if current_section and line.strip() and not line.startswith('*'):
                sections[current_section] += line + "\n"
        
        # Ha nem siker√ºlt parseolni, az eg√©sz v√°laszt t√°roljuk
        if not any(sections.values()):
            sections["full_response"] = response
        
        return {
            'success': True,
            'timestamp': datetime.now().isoformat(),
            **sections
        }
    
    def _create_empty_result(self) -> Dict[str, Any]:
        """√úres eredm√©ny strukt√∫ra"""
        return {
            'success': False,
            'timestamp': datetime.now().isoformat(),
            'research_findings': "Nem tal√°ltunk relev√°ns publik√°ci√≥kat.",
            'treatment_methods': "Nincs el√©rhet≈ë inform√°ci√≥.",
            'clinical_guidelines': "Nincs el√©rhet≈ë inform√°ci√≥.",
            'prognosis': "Nincs el√©rhet≈ë inform√°ci√≥.",
            'further_tests': "Nincs el√©rhet≈ë inform√°ci√≥."
        }
    
    def save_results(self, results: Dict[str, Any], patient_data: Dict[str, Any]) -> str:
        """Eredm√©nyek ment√©se"""
        try:
            # Export k√∂nyvt√°r
            export_dir = PUBMED_DATA_DIR / "exports"
            export_dir.mkdir(exist_ok=True)
            
            # F√°jln√©v
            case_id = patient_data.get('case_id', f"pubmed_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
            json_path = export_dir / f"{case_id}_pubmed.json"
            
            # Teljes adat √∂ssze√°ll√≠t√°sa
            export_data = {
                "pubmed_analysis": results,
                "patient_data": patient_data,
                "timestamp": results.get('timestamp', datetime.now().isoformat())
            }
            
            # Ment√©s
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            return str(json_path)
            
        except Exception as e:
            st.error(f"Ment√©si hiba: {e}")
            return ""

def run_pubmed_analysis(patient_data: Dict[str, Any], 
                    rag_results: Dict[str, Any] = None,
                    openai_api_key: str = None) -> Dict[str, Any]:
    """
    PubMed alap√∫ orvosi elemz√©s futtat√°sa
    
    Args:
        patient_data: Beteg adatok
        rag_results: RAG elemz√©s eredm√©nyei (opcion√°lis)
        openai_api_key: OpenAI API kulcs
    
    Returns:
        Dict: PubMed elemz√©s eredm√©nye
    """
    try:
        st.info("üî¨ PubMed m√©lykutat√°s ind√≠t√°sa...")
        
        # Analyzer inicializ√°l√°sa
        analyzer = PubMedAnalyzer(openai_api_key)
        
        # 1. Magyar adatok ford√≠t√°sa angolra
        st.info("üåê Adatok el≈ëk√©sz√≠t√©se a keres√©shez...")
        translated_data = analyzer.translate_patient_data(patient_data)
        
        # 2. Keres√©si query √∂ssze√°ll√≠t√°sa
        search_query = analyzer.build_search_query(translated_data, rag_results)
        st.info(f"üîç Keres√©si kifejez√©s: {search_query}")
        
        # 3. PubMed keres√©s
        pubmed_results = analyzer.search_pubmed(search_query)
        
        if not pubmed_results:
            st.warning("‚ö†Ô∏è Nem tal√°ltunk relev√°ns publik√°ci√≥kat")
            return analyzer._create_empty_result()
        
        # 4. Eredm√©nyek elemz√©se
        st.info("ü§ñ Publik√°ci√≥k elemz√©se √©s magyar nyelv≈± √∂sszefoglal√≥ k√©sz√≠t√©se...")
        analysis_results = analyzer.analyze_pubmed_results(
            pubmed_results, 
            patient_data,
            rag_results
        )
        
        # 5. Eredm√©nyek ment√©se
        save_path = analyzer.save_results(analysis_results, patient_data)
        if save_path:
            st.success(f"üíæ Eredm√©nyek elmentve: {Path(save_path).name}")
        
        # 6. Eredm√©nyek megjelen√≠t√©se
        display_pubmed_results(analysis_results, save_path)
        
        return analysis_results
        
    except Exception as e:
        st.error(f"‚ùå PubMed elemz√©si hiba: {e}")
        return {'success': False, 'error': str(e)}

def display_pubmed_results(results: Dict[str, Any], save_path: str = None):
    """PubMed eredm√©nyek megjelen√≠t√©se"""
    st.markdown("### üî¨ PubMed Kutat√°si Eredm√©nyek")
    
    if not results.get('success', False):
        st.error("Nem siker√ºlt az elemz√©s")
        return
    
    # Szekci√≥k megjelen√≠t√©se
    sections = [
        ("üìö Legfrissebb kutat√°si eredm√©nyek", "research_findings"),
        ("üíä Aj√°nlott kezel√©si m√≥dszerek", "treatment_methods"),
        ("üìã Klinikai ir√°nyelvek", "clinical_guidelines"),
        ("üìà Progn√≥zis √©s kil√°t√°sok", "prognosis"),
        ("üîç Tov√°bbi javasolt vizsg√°latok", "further_tests")
    ]
    
    for title, key in sections:
        content = results.get(key, "")
        if content and content.strip():
            with st.expander(title, expanded=(key == "research_findings")):
                st.markdown(content)
    
    # Ha van teljes v√°lasz (fallback)
    if results.get('full_response'):
        with st.expander("üìÑ Teljes elemz√©s", expanded=True):
            st.markdown(results['full_response'])
    
    # Let√∂lt√©si lehet≈ës√©g
    if save_path and os.path.exists(save_path):
        with open(save_path, 'r', encoding='utf-8') as f:
            st.download_button(
                label="üì• PubMed elemz√©s let√∂lt√©se (JSON)",
                data=f.read(),
                file_name=Path(save_path).name,
                mime="application/json",
                key="download_pubmed_json"
            )