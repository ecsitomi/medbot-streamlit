# pubmed_integration/pubmed_analyzer.py
"""
PubMed alap√∫ orvosi kutat√°s √©s elemz√©s
"""
import os
import re
import streamlit as st
from typing import Dict, Any, List, Optional
from datetime import datetime
import json
from pathlib import Path

from langchain_community.tools.pubmed.tool import PubmedQueryRun
from langchain_openai import ChatOpenAI
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain

from .config import PUBMED_CONFIG, PUBMED_DATA_DIR
from .advanced_search_strategy import AdvancedPubMedSearchStrategy

class PubMedAnalyzer:
    """PubMed alap√∫ orvosi elemz≈ë"""
    
    def __init__(self, openai_api_key: str = None):
        # API kulcs
        if not openai_api_key:
            openai_api_key = os.getenv("OPENAI_API_KEY") or st.secrets.get("OPENAI_API_KEY")
        
        if not openai_api_key:
            raise ValueError("OpenAI API key nem tal√°lhat√≥")
        
        self.api_key = openai_api_key
        
        # PubMed tool inicializ√°l√°sa
        self.pubmed_tool = PubmedQueryRun()
        
        # LLM inicializ√°l√°sa
        self.llm = ChatOpenAI(
            openai_api_key=self.api_key,
            model=PUBMED_CONFIG["llm"]["model"],
            temperature=PUBMED_CONFIG["llm"]["temperature"],
            max_tokens=PUBMED_CONFIG["llm"]["max_tokens"]
        )
        
        # Ford√≠t√≥ LLM (kisebb modell a k√∂lts√©ghat√©konys√°g miatt)
        self.translator = ChatOpenAI(
            openai_api_key=self.api_key,
            model="gpt-5",
            temperature=0
        )
    
    # TOV√ÅBBFEJLESZTETT ADVANCED SEARCH STRATEGY
    def run_advanced_pubmed_search(self, patient_data: Dict[str, Any]) -> str:
        """√öjratervezett strat√©gia alap√∫ lek√©rdez√©s √©s keres√©s"""
        strategy = AdvancedPubMedSearchStrategy()
        
        # Debug inform√°ci√≥k megjelen√≠t√©se fejleszt√©si m√≥dban
        if st.session_state.get('debug_mode', False):
            debug_info = strategy.debug_query_generation(patient_data)
            st.write("üîß **Debug inform√°ci√≥k:**", debug_info)
        
        queries = strategy.build_comprehensive_search_queries(patient_data)
        
        if not queries:
            st.warning("‚ö†Ô∏è Nem siker√ºlt keres√©si lek√©rdez√©seket gener√°lni")
            return ""
        
        # Lek√©rdez√©sek v√©grehajt√°sa
        all_results = ""
        successful_queries = 0
        
        for i, q in enumerate(queries):
            query_string = strategy.format_final_query(q)
            
            if not query_string:
                st.warning(f"‚ùå {i+1}. lek√©rdez√©s √ºres")
                continue
                
            #st.info(f"üîç {i+1}. lek√©rdez√©s ({len(query_string)} karakter): {query_string[:100]}...")
            
            try:
                result = self.pubmed_tool.invoke(query_string)
                if result and len(result.strip()) > 50:  # Csak √©rtelmes eredm√©nyeket fogadjuk el
                    all_results += f"\n--- QUERY {i+1} ---\n{query_string}\n--- RESULT ---\n{result}\n"
                    successful_queries += 1
                    #st.success(f"‚úÖ {i+1}. lek√©rdez√©s sikeres")
                else:
                    st.warning(f"‚ö†Ô∏è {i+1}. lek√©rdez√©s √ºres eredm√©nyt adott")
                
                # Ha m√°r van 2 sikeres lek√©rdez√©s, el√©g
                if successful_queries >= 2:
                    break
                    
            except Exception as e:
                st.error(f"‚ùå Hiba a {i+1}. lek√©rdez√©sn√©l: {e}")
                continue
        
        if successful_queries == 0:
            st.error("‚ùå Egyik lek√©rdez√©s sem volt sikeres")
            return ""
        
        #st.success(f"‚úÖ √ñsszesen {successful_queries} sikeres lek√©rdez√©s")
        return all_results.strip()
    
    def run_simple_pubmed_search(self, patient_data: Dict[str, Any]) -> str:
        """Egyszer≈± fallback keres√©s, ha a komplex keres√©s nem m≈±k√∂dik"""
        symptoms = patient_data.get('symptoms', [])
        diagnosis = patient_data.get('diagnosis', '')
        
        # Egyszer≈± query √©p√≠t√©se
        query_parts = []
        
        if symptoms:
            # Csak az els≈ë 2 t√ºnet
            primary_symptoms = symptoms[:2]
            for symptom in primary_symptoms:
                # Egyszer≈± ford√≠t√°s
                eng_symptom = self._simple_translate(symptom)
                if eng_symptom:
                    query_parts.append(eng_symptom)
        
        if diagnosis and diagnosis != "Nem siker√ºlt diagn√≥zist javasolni.":
            eng_diagnosis = self._simple_translate(diagnosis)
            if eng_diagnosis:
                query_parts.append(eng_diagnosis)
        
        if not query_parts:
            return ""
        
        # Egyszer≈± query √∂ssze√°ll√≠t√°sa
        simple_query = " AND ".join(query_parts[:2])  # Max 2 elem
        final_query = f"({simple_query}) AND humans[MeSH]"
        
        #st.info(f"üîç Egyszer≈± keres√©s: {final_query}")
        
        try:
            result = self.pubmed_tool.invoke(final_query)
            return result if result else ""
        except Exception as e:
            st.error(f"‚ùå Egyszer≈± keres√©s is sikertelen: {e}")
            return ""
    
    def _simple_translate(self, text: str) -> str:
        """Egyszer≈± magyar-angol ford√≠t√°s alapvet≈ë kifejez√©sekhez"""
        simple_translations = {
            'fejf√°j√°s': 'headache',
            'l√°z': 'fever',
            'k√∂h√∂g√©s': 'cough',
            'h√°ny√°s': 'vomiting',
            'hasmen√©s': 'diarrhea',
            'f√°radts√°g': 'fatigue',
            'sz√©d√ºl√©s': 'dizziness',
            'hasf√°j√°s': 'abdominal pain',
            'torokf√°j√°s': 'sore throat',
            'l√©gz√©si neh√©zs√©g': 'dyspnea',
            'influenza': 'influenza',
            'megf√°z√°s': 'common cold',
            'gastritis': 'gastritis',
            'allergia': 'allergy',
            'asztma': 'asthma'
        }
        
        text_lower = text.lower().strip()
        
        # Tiszt√≠t√°s - bizonytalan kifejez√©sek elt√°vol√≠t√°sa
        text_lower = re.sub(r'^(lehets√©ges|val√≥sz√≠n≈±|esetleg|tal√°n)\s+', '', text_lower)
        text_lower = re.sub(r'\s+(gyan√∫ja|gyan√∫)$', '', text_lower)
        
        return simple_translations.get(text_lower, text_lower)  
    
    def translate_to_english(self, text: str) -> str:
        """Magyar sz√∂veg ford√≠t√°sa angolra"""
        if not text:
            return ""
        
        prompt = f"Translate this Hungarian medical text to English. Only return the translation, nothing else:\n{text}"
        return self.translator.predict(prompt).strip()
    
    def translate_patient_data(self, patient_data: Dict[str, Any]) -> Dict[str, Any]:
        """Betegadatok ford√≠t√°sa angolra a PubMed keres√©shez"""
        translated = {}
        
        # T√ºnetek ford√≠t√°sa
        symptoms = patient_data.get('symptoms', [])
        if symptoms:
            translated['symptoms'] = [self.translate_to_english(s) for s in symptoms if s]
        
        # Diagn√≥zis ford√≠t√°sa
        diagnosis = patient_data.get('diagnosis', '')
        if diagnosis:
            translated['diagnosis'] = self.translate_to_english(diagnosis)
        
        # Egy√©b mez≈ëk ford√≠t√°sa
        if patient_data.get('existing_conditions'):
            translated['existing_conditions'] = [
                self.translate_to_english(c) for c in patient_data['existing_conditions'] if c
            ]
        
        if patient_data.get('medications'):
            translated['medications'] = [
                self.translate_to_english(m) for m in patient_data['medications'] if m
            ]
        
        # Sz√°m√©rt√©kek √°tv√©tele v√°ltoztat√°s n√©lk√ºl
        translated['age'] = patient_data.get('age')
        translated['gender'] = patient_data.get('gender')
        translated['severity'] = patient_data.get('severity')
        translated['duration'] = patient_data.get('duration')
        
        return translated
    
    def build_search_query(self, translated_data: Dict[str, Any], rag_results: Dict[str, Any] = None) -> str:
        """PubMed keres√©si query √∂ssze√°ll√≠t√°sa"""
        query_parts = []
        
        # F≈ë t√ºnetek
        if translated_data.get('symptoms'):
            symptoms_str = " AND ".join(f'"{s}"' for s in translated_data['symptoms'][:3])
            query_parts.append(f"({symptoms_str})")
        
        # Diagn√≥zis
        if translated_data.get('diagnosis'):
            query_parts.append(f'"{translated_data["diagnosis"]}"')
        
        # Ha van RAG eredm√©ny, haszn√°ljuk azt is
        if rag_results and rag_results.get('patient_condition'):
            # Kivonjuk a kulcsszavakat a RAG eredm√©nyb≈ël
            condition_text = self.translate_to_english(rag_results['patient_condition'])
            # Csak az els≈ë mondatot haszn√°ljuk
            if condition_text:
                first_sentence = condition_text.split('.')[0]
                query_parts.append(f"({first_sentence})")
        
        # √âletkor √©s nem sz≈±r≈ëk
        age = translated_data.get('age')
        if age:
            if age < 18:
                query_parts.append("pediatric OR children")
            elif age > 65:
                query_parts.append("elderly OR geriatric")
        
        # Query √∂ssze√°ll√≠t√°sa
        final_query = " AND ".join(query_parts) if query_parts else "medical treatment"
        
        # Limit√°ljuk a query hossz√°t
        if len(final_query) > 200:
            final_query = final_query[:200]
        
        return final_query
    
    def search_pubmed(self, query: str) -> str:
        """PubMed keres√©s v√©grehajt√°sa"""
        try:
            #st.info(f"üîç PubMed keres√©s: {query[:100]}...")
            results = self.pubmed_tool.invoke(query)
            return results
        except Exception as e:
            st.error(f"PubMed keres√©si hiba: {e}")
            return ""
    
    def analyze_pubmed_results(self, pubmed_results: str, patient_data: Dict[str, Any], 
                             rag_results: Dict[str, Any] = None) -> Dict[str, Any]:
        """PubMed eredm√©nyek elemz√©se √©s magyar nyelv≈± √∂sszefoglal√≥ k√©sz√≠t√©se"""
        
        if not pubmed_results:
            return self._create_empty_result()
        
        # Prompt template az elemz√©shez
        analysis_prompt = PromptTemplate(
            input_variables=["pubmed_results", "patient_info", "rag_context"],
            template="""Te egy orvosi szak√©rt≈ë vagy, aki a legfrissebb PubMed publik√°ci√≥k alapj√°n ad tan√°csokat.

PubMed keres√©si eredm√©nyek:
{pubmed_results}

Beteg inform√°ci√≥k:
{patient_info}

Kor√°bbi elemz√©s (ha van):
{rag_context}

K√©rlek k√©sz√≠ts MAGYAR nyelv≈± r√©szletes elemz√©st a k√∂vetkez≈ë strukt√∫r√°ban:

1. **Legfrissebb kutat√°si eredm√©nyek** - Mit mondanak a leg√∫jabb publik√°ci√≥k a beteg √°llapot√°r√≥l?
2. **Aj√°nlott kezel√©si m√≥dszerek** - Milyen evidencia-alap√∫ kezel√©seket javasolnak a cikkek?
3. **Klinikai ir√°nyelvek** - Vannak-e specifikus protokollok vagy guidelines?
4. **Progn√≥zis √©s kil√°t√°sok** - Mit mutatnak a kutat√°sok a gy√≥gyul√°si es√©lyekr≈ël?
5. **Tov√°bbi vizsg√°latok** - Milyen tov√°bbi vizsg√°latokat javasolnak a publik√°ci√≥k?

FONTOS: A v√°laszod legyen MAGYAR nyelv≈±, k√∂z√©rthet≈ë √©s praktikus!
"""
        )
        
        # LLM chain
        chain = LLMChain(llm=self.llm, prompt=analysis_prompt)
        
        # Beteg info √∂sszefoglal√°sa
        patient_info = self._format_patient_info(patient_data)
        
        # RAG kontextus
        rag_context = ""
        if rag_results:
            rag_context = f"""
            √Ållapot: {rag_results.get('patient_condition', 'N/A')}
            Javasolt kezel√©s: {rag_results.get('symptom_management', 'N/A')}
            """
        
        try:
            # Elemz√©s futtat√°sa
            response = chain.run(
                pubmed_results=pubmed_results[:3000],  # Limit√°ljuk a hosszt
                patient_info=patient_info,
                rag_context=rag_context
            )
            
            # V√°lasz feldolgoz√°sa
            return self._parse_analysis_response(response)
            
        except Exception as e:
            st.error(f"PubMed elemz√©si hiba: {e}")
            return self._create_empty_result()
    
    def _format_patient_info(self, patient_data: Dict[str, Any]) -> str:
        """Beteg inform√°ci√≥k form√°z√°sa"""
        info_parts = []
        
        if patient_data.get('age'):
            info_parts.append(f"√âletkor: {patient_data['age']} √©v")
        
        if patient_data.get('gender'):
            info_parts.append(f"Nem: {patient_data['gender']}")
        
        if patient_data.get('symptoms'):
            info_parts.append(f"T√ºnetek: {', '.join(patient_data['symptoms'])}")
        
        if patient_data.get('diagnosis'):
            info_parts.append(f"Diagn√≥zis: {patient_data['diagnosis']}")
        
        if patient_data.get('severity'):
            info_parts.append(f"S√∫lyoss√°g: {patient_data['severity']}")
        
        return " | ".join(info_parts)
    
    def _parse_analysis_response(self, response: str) -> Dict[str, Any]:
        """AI v√°lasz struktur√°lt form√°ba alak√≠t√°sa - REGEX ALAP√ö"""
        import re
        from datetime import datetime
        
        sections = {
            "research_findings": "",
            "treatment_methods": "",
            "clinical_guidelines": "",
            "prognosis": "",
            "further_tests": ""
        }
        
        if not response or len(response.strip()) < 10:
            return self._create_empty_result()
        
        # Regex pattern a sz√°mozott szekci√≥k megtal√°l√°s√°ra
        # T√°mogatja: 1. **C√≠m** vagy 1. C√≠m form√°tumokat
        patterns = [
            # 1. Legfrissebb kutat√°si eredm√©nyek
            r"1\.\s*\*{0,2}(?:Legfrissebb kutat√°si eredm√©nyek|Kutat√°si eredm√©nyek)[:\*]*\s*(.*?)(?=2\.|$)",
            # 2. Aj√°nlott kezel√©si m√≥dszerek
            r"2\.\s*\*{0,2}(?:Aj√°nlott kezel√©si m√≥dszerek|Kezel√©si m√≥dszerek)[:\*]*\s*(.*?)(?=3\.|$)",
            # 3. Klinikai ir√°nyelvek
            r"3\.\s*\*{0,2}(?:Klinikai ir√°nyelvek|Ir√°nyelvek)[:\*]*\s*(.*?)(?=4\.|$)",
            # 4. Progn√≥zis √©s kil√°t√°sok
            r"4\.\s*\*{0,2}(?:Progn√≥zis √©s kil√°t√°sok|Progn√≥zis)[:\*]*\s*(.*?)(?=5\.|$)",
            # 5. Tov√°bbi vizsg√°latok
            r"5\.\s*\*{0,2}(?:Tov√°bbi vizsg√°latok|Tov√°bbi javasolt vizsg√°latok|Vizsg√°latok)[:\*]*\s*(.*?)(?=$)"
        ]
        
        # Kulcsok sorrendben
        keys = ["research_findings", "treatment_methods", "clinical_guidelines", "prognosis", "further_tests"]
        
        # Pr√≥b√°ljuk meg minden patternt
        for i, (pattern, key) in enumerate(zip(patterns, keys)):
            match = re.search(pattern, response, re.DOTALL | re.IGNORECASE)
            if match:
                content = match.group(1).strip()
                # Tiszt√≠tjuk a tartalmat
                content = self._clean_content(content)
                if content:
                    sections[key] = content
        
        # Ha nem tal√°ltunk sz√°mozott list√°t, pr√≥b√°ljuk meg ** c√≠mek ** alapj√°n
        if not any(sections.values()):
            sections = self._extract_by_headers(response)
        
        # Ha m√©g mindig nincs eredm√©ny, haszn√°ljunk √°ltal√°nos pattern-t
        if not any(sections.values()):
            sections = self._extract_general_numbered_list(response)
        
        # Fallback: teljes v√°lasz ment√©se
        if not any(sections.values()):
            sections["full_response"] = response
            if st.session_state.get('debug_mode', False):
                st.warning("‚ö†Ô∏è Nem siker√ºlt szekci√≥kra bontani, teljes v√°lasz mentve")
        
        return {
            'success': True,
            'timestamp': datetime.now().isoformat(),
            **sections
        }

    def _extract_by_headers(self, response: str) -> Dict[str, str]:
        """Kivonat ** header ** form√°tum alapj√°n"""
        import re
        
        sections = {
            "research_findings": "",
            "treatment_methods": "",
            "clinical_guidelines": "",
            "prognosis": "",
            "further_tests": ""
        }
        
        # Pattern a **c√≠m** form√°tum√∫ r√©szek megtal√°l√°s√°ra
        header_patterns = {
            "research_findings": r"\*\*(Legfrissebb kutat√°si eredm√©nyek|Kutat√°si eredm√©nyek)\*\*:?\s*(.*?)(?=\*\*|$)",
            "treatment_methods": r"\*\*(Aj√°nlott kezel√©si m√≥dszerek|Kezel√©si m√≥dszerek)\*\*:?\s*(.*?)(?=\*\*|$)",
            "clinical_guidelines": r"\*\*(Klinikai ir√°nyelvek|Ir√°nyelvek)\*\*:?\s*(.*?)(?=\*\*|$)",
            "prognosis": r"\*\*(Progn√≥zis √©s kil√°t√°sok|Progn√≥zis)\*\*:?\s*(.*?)(?=\*\*|$)",
            "further_tests": r"\*\*(Tov√°bbi vizsg√°latok|Tov√°bbi javasolt vizsg√°latok)\*\*:?\s*(.*?)(?=\*\*|$)"
        }
        
        for key, pattern in header_patterns.items():
            match = re.search(pattern, response, re.DOTALL | re.IGNORECASE)
            if match:
                content = match.group(2).strip()
                content = self._clean_content(content)
                if content:
                    sections[key] = content
        
        return sections

    def _extract_general_numbered_list(self, response: str) -> Dict[str, str]:
        """√Åltal√°nos sz√°mozott lista feldolgoz√°sa"""
        import re
        
        sections = {
            "research_findings": "",
            "treatment_methods": "",
            "clinical_guidelines": "",
            "prognosis": "",
            "further_tests": ""
        }
        
        # √Åltal√°nos pattern b√°rmilyen sz√°mozott list√°hoz
        general_pattern = r"(\d+)\.\s*\*{0,2}(.*?)\*{0,2}:?\s*(.*?)(?=\d+\.|$)"
        
        matches = re.findall(general_pattern, response, re.DOTALL)
        
        for number, title, content in matches:
            title_lower = title.lower().strip()
            content = self._clean_content(content.strip())
            
            # Kulcsszavak alapj√°n kategoriz√°l√°s
            if any(kw in title_lower for kw in ['kutat√°s', 'eredm√©ny', 'publik√°ci√≥', 'tanulm√°ny', 'evidencia']):
                sections["research_findings"] = content
            elif any(kw in title_lower for kw in ['kezel√©s', 'ter√°pia', 'gy√≥gyszer', 'm√≥dszer']):
                sections["treatment_methods"] = content
            elif any(kw in title_lower for kw in ['ir√°nyelv', 'protokoll', 'guideline', 'standard']):
                sections["clinical_guidelines"] = content
            elif any(kw in title_lower for kw in ['progn√≥zis', 'kil√°t√°s', 'kimenetel', 'gy√≥gyul√°s']):
                sections["prognosis"] = content
            elif any(kw in title_lower for kw in ['vizsg√°lat', 'diagnosztika', 'teszt', 'tov√°bbi']):
                sections["further_tests"] = content
        
        return sections

    def _clean_content(self, content: str) -> str:
        """Tartalom tiszt√≠t√°sa"""
        if not content:
            return ""
        
        import re
        
        # Elt√°vol√≠tjuk a felesleges whitespace-t
        content = content.strip()
        
        # Elt√°vol√≠tjuk a t√∂bbsz√∂r√∂s √ºres sorokat
        content = re.sub(r'\n\s*\n+', '\n\n', content)
        
        # Elt√°vol√≠tjuk a vezet≈ë sz√°moz√°st a sorok elej√©r≈ël
        content = re.sub(r'^[\d\-\*\‚Ä¢]+\.\s*', '', content, flags=re.MULTILINE)
        
        # Elt√°vol√≠tjuk a felesleges markdown jel√∂l√©seket
        content = re.sub(r'^\*+\s*', '', content, flags=re.MULTILINE)
        content = re.sub(r'\*+$', '', content, flags=re.MULTILINE)
        
        return content.strip()

    # TESZTEL≈ê F√úGGV√âNY
    def test_parse_response(self):
        """Tesztel√©s k√ºl√∂nb√∂z≈ë v√°lasz form√°tumokkal"""
        
        test_responses = [
            # Form√°tum 1: Sz√°mozott lista **c√≠mekkel**
            """
            1. **Legfrissebb kutat√°si eredm√©nyek**
            A leg√∫jabb meta-anal√≠zis szerint a betegs√©g...
            
            2. **Aj√°nlott kezel√©si m√≥dszerek**
            Az els≈ëvonalbeli kezel√©s mag√°ban foglalja...
            
            3. **Klinikai ir√°nyelvek**
            A WHO 2024-es aj√°nl√°sa alapj√°n...
            
            4. **Progn√≥zis √©s kil√°t√°sok**
            A betegek 80%-a teljes gy√≥gyul√°st mutat...
            
            5. **Tov√°bbi vizsg√°latok**
            Javasolt laborvizsg√°latok: CBC, CRP...
            """,
            
            # Form√°tum 2: Csak **c√≠mek**
            """
            **Legfrissebb kutat√°si eredm√©nyek**
            √öj tanulm√°nyok kimutatt√°k...
            
            **Aj√°nlott kezel√©si m√≥dszerek**
            Gy√≥gyszeres ter√°pia: ...
            """,
            
            # Form√°tum 3: Egyszer≈± sz√°mozott lista
            """
            1. Kutat√°si eredm√©nyek: A vizsg√°latok azt mutatj√°k...
            2. Kezel√©si m√≥dszerek: Antibiotikum ter√°pia...
            3. Ir√°nyelvek: EMA guideline szerint...
            4. Progn√≥zis: J√≥ kil√°t√°sok...
            5. Tov√°bbi vizsg√°latok: MRI javasolt...
            """
        ]
        
        for i, test_response in enumerate(test_responses):
            st.write(f"### Teszt {i+1}")
            result = self._parse_analysis_response(test_response)
            st.json(result)
    
    def _create_empty_result(self) -> Dict[str, Any]:
        """√úres eredm√©ny strukt√∫ra"""
        return {
            'success': False,
            'timestamp': datetime.now().isoformat(),
            'research_findings': "Nem tal√°ltunk relev√°ns publik√°ci√≥kat.",
            'treatment_methods': "Nincs el√©rhet≈ë inform√°ci√≥.",
            'clinical_guidelines': "Nincs el√©rhet≈ë inform√°ci√≥.",
            'prognosis': "Nincs el√©rhet≈ë inform√°ci√≥.",
            'further_tests': "Nincs el√©rhet≈ë inform√°ci√≥."
        }
    
    def save_results(self, results: Dict[str, Any], patient_data: Dict[str, Any]) -> str:
        """Eredm√©nyek ment√©se"""
        try:
            # Export k√∂nyvt√°r
            export_dir = PUBMED_DATA_DIR / "exports"
            export_dir.mkdir(exist_ok=True)
            
            # F√°jln√©v
            case_id = patient_data.get('case_id', f"pubmed_{datetime.now().strftime('%Y%m%d_%H%M%S')}")
            json_path = export_dir / f"{case_id}_pubmed.json"
            
            # Teljes adat √∂ssze√°ll√≠t√°sa
            export_data = {
                "pubmed_analysis": results,
                "patient_data": patient_data,
                "timestamp": results.get('timestamp', datetime.now().isoformat())
            }
            
            # Ment√©s
            with open(json_path, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            return str(json_path)
            
        except Exception as e:
            st.error(f"Ment√©si hiba: {e}")
            return ""

def run_pubmed_analysis(patient_data: Dict[str, Any], 
                    rag_results: Dict[str, Any] = None,
                    openai_api_key: str = None) -> Dict[str, Any]:
    """
    PubMed alap√∫ orvosi elemz√©s futtat√°sa
    
    Args:
        patient_data: Beteg adatok
        rag_results: RAG elemz√©s eredm√©nyei (opcion√°lis)
        openai_api_key: OpenAI API kulcs
    
    Returns:
        Dict: PubMed elemz√©s eredm√©nye
    """
    try:
        #st.info("üî¨ PubMed m√©lykutat√°s ind√≠t√°sa...")
        
        # Analyzer inicializ√°l√°sa
        analyzer = PubMedAnalyzer(openai_api_key)
        
        # 1. Magyar adatok ford√≠t√°sa angolra
        #st.info("üåê Adatok el≈ëk√©sz√≠t√©se a keres√©shez...")
        translated_data = analyzer.translate_patient_data(patient_data)
        
        # 2. Keres√©si query √∂ssze√°ll√≠t√°sa
        search_query = analyzer.build_search_query(translated_data, rag_results)
        #st.info(f"üîç Keres√©si kifejez√©s: {search_query}")
        
        # 3. PubMed keres√©s - TOV√ÅBBFEJLESZTETT STRAT√âGIA
        #st.info("üîç Optimaliz√°lt PubMed keres√©s ind√≠t√°sa...")
        pubmed_results = analyzer.run_advanced_pubmed_search(translated_data)
        
        # Ha a fejlett keres√©s nem m≈±k√∂d√∂tt, pr√≥b√°ljuk az egyszer≈± keres√©st
        if not pubmed_results or len(pubmed_results.strip()) < 100:
            st.warning("‚ö†Ô∏è Fejlett keres√©s sikertelen, egyszer≈± keres√©s pr√≥b√°l√°sa...")
            pubmed_results = analyzer.run_simple_pubmed_search(patient_data)
        
        if not pubmed_results:
            st.warning("‚ö†Ô∏è Nem tal√°ltunk relev√°ns publik√°ci√≥kat egyik m√≥dszerrel sem")
            return analyzer._create_empty_result()
        
        # 4. Eredm√©nyek elemz√©se
        #with st.spinner("ü§ñ Publik√°ci√≥k elemz√©se..."):
        analysis_results = analyzer.analyze_pubmed_results(
            pubmed_results, 
            patient_data,
            rag_results
        )
        '''
        st.info("ü§ñ Publik√°ci√≥k elemz√©se √©s magyar nyelv≈± √∂sszefoglal√≥ k√©sz√≠t√©se...")
        analysis_results = analyzer.analyze_pubmed_results(
            pubmed_results, 
            patient_data,
            rag_results
        )
        '''

        # 5. Eredm√©nyek ment√©se
        save_path = analyzer.save_results(analysis_results, patient_data)
        #if save_path:
         #   st.success(f"üíæ Eredm√©nyek elmentve: {Path(save_path).name}")
        
        # 6. Eredm√©nyek megjelen√≠t√©se
        #display_pubmed_results(analysis_results, save_path)
        
        return analysis_results
        
    except Exception as e:
        st.error(f"‚ùå PubMed elemz√©si hiba: {e}")
        return {'success': False, 'error': str(e)}

def display_pubmed_results(results: Dict[str, Any], save_path: str = None):
    """PubMed eredm√©nyek megjelen√≠t√©se"""
    st.markdown("### üî¨ PubMed Kutat√°si Eredm√©nyek")
    
    if not results.get('success', False):
        st.error("Nem siker√ºlt az elemz√©s")
        return
    
    # Szekci√≥k megjelen√≠t√©se
    sections = [
        ("üìö Legfrissebb kutat√°si eredm√©nyek", "research_findings"),
        ("üíä Aj√°nlott kezel√©si m√≥dszerek", "treatment_methods"),
        ("üìã Klinikai ir√°nyelvek", "clinical_guidelines"),
        ("üìà Progn√≥zis √©s kil√°t√°sok", "prognosis"),
        ("üîç Tov√°bbi javasolt vizsg√°latok", "further_tests")
    ]
    
    for title, key in sections:
        content = results.get(key, "")
        if content and content.strip():
            #with st.expander(title, expanded=(key == "research_findings")):
            #    st.markdown(content)

            st.success(f"üë®‚Äç‚öïÔ∏è {title}: {content.strip()}")
    
    # Ha van teljes v√°lasz (fallback)
    if results.get('full_response'):
        with st.expander("üìÑ Teljes elemz√©s", expanded=True):
            st.markdown(results['full_response'])
    
    # Let√∂lt√©si lehet≈ës√©g
    if save_path and os.path.exists(save_path):
        with open(save_path, 'r', encoding='utf-8') as f:
            st.download_button(
                label="üì• PubMed elemz√©s let√∂lt√©se (JSON)",
                data=f.read(),
                file_name=Path(save_path).name,
                mime="application/json",
                key="download_pubmed_json"
            )